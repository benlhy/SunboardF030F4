
SunBoardF030F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018ec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080019ac  080019ac  000119ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080019dc  080019dc  000119dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019e0  080019e0  000119e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080019e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000098  20000004  080019e8  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000009c  080019e8  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001126f  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002481  00000000  00000000  0003129b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000061ac  00000000  00000000  0003371c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000770  00000000  00000000  000398c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000ab0  00000000  00000000  0003a038  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000049d8  00000000  00000000  0003aae8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002d96  00000000  00000000  0003f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00042256  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000163c  00000000  00000000  000422d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001994 	.word	0x08001994

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08001994 	.word	0x08001994

08000108 <__gnu_thumb1_case_uqi>:
 8000108:	b402      	push	{r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0049      	lsls	r1, r1, #1
 8000110:	5c09      	ldrb	r1, [r1, r0]
 8000112:	0049      	lsls	r1, r1, #1
 8000114:	448e      	add	lr, r1
 8000116:	bc02      	pop	{r1}
 8000118:	4770      	bx	lr
 800011a:	46c0      	nop			; (mov r8, r8)

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000234:	b510      	push	{r4, lr}
 8000236:	0004      	movs	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000238:	f000 fbe6 	bl	8000a08 <HAL_RCC_GetHCLKFreq>
 800023c:	21fa      	movs	r1, #250	; 0xfa
 800023e:	0089      	lsls	r1, r1, #2
 8000240:	f7ff ff6c 	bl	800011c <__udivsi3>
 8000244:	f000 f866 	bl	8000314 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000248:	2001      	movs	r0, #1
 800024a:	2200      	movs	r2, #0
 800024c:	0021      	movs	r1, r4
 800024e:	4240      	negs	r0, r0
 8000250:	f000 f830 	bl	80002b4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000254:	2000      	movs	r0, #0
 8000256:	bd10      	pop	{r4, pc}

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	2310      	movs	r3, #16
 800025a:	4a06      	ldr	r2, [pc, #24]	; (8000274 <HAL_Init+0x1c>)
{
 800025c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025e:	6811      	ldr	r1, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000260:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000262:	430b      	orrs	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8000266:	f7ff ffe5 	bl	8000234 <HAL_InitTick>
  HAL_MspInit();
 800026a:	f001 fa95 	bl	8001798 <HAL_MspInit>
}
 800026e:	2000      	movs	r0, #0
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)
 8000274:	40022000 	.word	0x40022000

08000278 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000278:	4a02      	ldr	r2, [pc, #8]	; (8000284 <HAL_IncTick+0xc>)
 800027a:	6813      	ldr	r3, [r2, #0]
 800027c:	3301      	adds	r3, #1
 800027e:	6013      	str	r3, [r2, #0]
}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)
 8000284:	20000038 	.word	0x20000038

08000288 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000288:	4b01      	ldr	r3, [pc, #4]	; (8000290 <HAL_GetTick+0x8>)
 800028a:	6818      	ldr	r0, [r3, #0]
}
 800028c:	4770      	bx	lr
 800028e:	46c0      	nop			; (mov r8, r8)
 8000290:	20000038 	.word	0x20000038

08000294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000294:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000296:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000298:	f7ff fff6 	bl	8000288 <HAL_GetTick>
  uint32_t wait = Delay;
 800029c:	9c01      	ldr	r4, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800029e:	0005      	movs	r5, r0
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
     wait++;
 80002a0:	1c63      	adds	r3, r4, #1
 80002a2:	1e5a      	subs	r2, r3, #1
 80002a4:	4193      	sbcs	r3, r2
 80002a6:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002a8:	f7ff ffee 	bl	8000288 <HAL_GetTick>
 80002ac:	1b40      	subs	r0, r0, r5
 80002ae:	42a0      	cmp	r0, r4
 80002b0:	d3fa      	bcc.n	80002a8 <HAL_Delay+0x14>
  {
  }
}
 80002b2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}

080002b4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80002b4:	b570      	push	{r4, r5, r6, lr}
 80002b6:	0189      	lsls	r1, r1, #6
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 80002b8:	2800      	cmp	r0, #0
 80002ba:	da14      	bge.n	80002e6 <HAL_NVIC_SetPriority+0x32>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	230f      	movs	r3, #15
 80002be:	b2c0      	uxtb	r0, r0
 80002c0:	4003      	ands	r3, r0
 80002c2:	3b08      	subs	r3, #8
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <HAL_NVIC_SetPriority+0x58>)
 80002c6:	089b      	lsrs	r3, r3, #2
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	189b      	adds	r3, r3, r2
 80002cc:	2203      	movs	r2, #3
 80002ce:	4010      	ands	r0, r2
 80002d0:	4090      	lsls	r0, r2
 80002d2:	32fc      	adds	r2, #252	; 0xfc
 80002d4:	0015      	movs	r5, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002d6:	4011      	ands	r1, r2
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d8:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002da:	4081      	lsls	r1, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002dc:	69dc      	ldr	r4, [r3, #28]
 80002de:	43ac      	bics	r4, r5
 80002e0:	4321      	orrs	r1, r4
 80002e2:	61d9      	str	r1, [r3, #28]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80002e4:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e6:	2503      	movs	r5, #3
 80002e8:	0883      	lsrs	r3, r0, #2
 80002ea:	4028      	ands	r0, r5
 80002ec:	40a8      	lsls	r0, r5
 80002ee:	35fc      	adds	r5, #252	; 0xfc
 80002f0:	002e      	movs	r6, r5
 80002f2:	4a07      	ldr	r2, [pc, #28]	; (8000310 <HAL_NVIC_SetPriority+0x5c>)
 80002f4:	009b      	lsls	r3, r3, #2
 80002f6:	189b      	adds	r3, r3, r2
 80002f8:	22c0      	movs	r2, #192	; 0xc0
 80002fa:	4086      	lsls	r6, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002fc:	4029      	ands	r1, r5
 80002fe:	4081      	lsls	r1, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000300:	0092      	lsls	r2, r2, #2
 8000302:	589c      	ldr	r4, [r3, r2]
 8000304:	43b4      	bics	r4, r6
 8000306:	4321      	orrs	r1, r4
 8000308:	5099      	str	r1, [r3, r2]
 800030a:	e7eb      	b.n	80002e4 <HAL_NVIC_SetPriority+0x30>
 800030c:	e000ed00 	.word	0xe000ed00
 8000310:	e000e100 	.word	0xe000e100

08000314 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <HAL_SYSTICK_Config+0x28>)
 8000316:	1e43      	subs	r3, r0, #1
  {
    return (1UL);                                                   /* Reload value impossible */
 8000318:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800031a:	4293      	cmp	r3, r2
 800031c:	d80d      	bhi.n	800033a <HAL_SYSTICK_Config+0x26>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800031e:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000320:	4a07      	ldr	r2, [pc, #28]	; (8000340 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000322:	4808      	ldr	r0, [pc, #32]	; (8000344 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000324:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000326:	6a03      	ldr	r3, [r0, #32]
 8000328:	0609      	lsls	r1, r1, #24
 800032a:	021b      	lsls	r3, r3, #8
 800032c:	0a1b      	lsrs	r3, r3, #8
 800032e:	430b      	orrs	r3, r1
 8000330:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000332:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000334:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000336:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000338:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800033a:	4770      	bx	lr
 800033c:	00ffffff 	.word	0x00ffffff
 8000340:	e000e010 	.word	0xe000e010
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000348:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034a:	680b      	ldr	r3, [r1, #0]
{ 
 800034c:	b087      	sub	sp, #28
  while (((GPIO_Init->Pin) >> position) != RESET)
 800034e:	9302      	str	r3, [sp, #8]
  uint32_t position = 0x00U;
 8000350:	2300      	movs	r3, #0
{ 
 8000352:	9101      	str	r1, [sp, #4]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000354:	9a02      	ldr	r2, [sp, #8]
 8000356:	40da      	lsrs	r2, r3
 8000358:	d101      	bne.n	800035e <HAL_GPIO_Init+0x16>
      }
    }
    
    position++;
  } 
}
 800035a:	b007      	add	sp, #28
 800035c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800035e:	2201      	movs	r2, #1
 8000360:	409a      	lsls	r2, r3
 8000362:	9203      	str	r2, [sp, #12]
 8000364:	9903      	ldr	r1, [sp, #12]
 8000366:	9a02      	ldr	r2, [sp, #8]
 8000368:	400a      	ands	r2, r1
 800036a:	9200      	str	r2, [sp, #0]
    if(iocurrent)
 800036c:	d100      	bne.n	8000370 <HAL_GPIO_Init+0x28>
 800036e:	e08c      	b.n	800048a <HAL_GPIO_Init+0x142>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000370:	9a01      	ldr	r2, [sp, #4]
 8000372:	2110      	movs	r1, #16
 8000374:	6852      	ldr	r2, [r2, #4]
 8000376:	0016      	movs	r6, r2
 8000378:	438e      	bics	r6, r1
 800037a:	2e02      	cmp	r6, #2
 800037c:	d10e      	bne.n	800039c <HAL_GPIO_Init+0x54>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 800037e:	2507      	movs	r5, #7
 8000380:	401d      	ands	r5, r3
 8000382:	00ad      	lsls	r5, r5, #2
 8000384:	3901      	subs	r1, #1
 8000386:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3];
 8000388:	08dc      	lsrs	r4, r3, #3
 800038a:	00a4      	lsls	r4, r4, #2
 800038c:	1904      	adds	r4, r0, r4
 800038e:	6a27      	ldr	r7, [r4, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000390:	438f      	bics	r7, r1
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000392:	9901      	ldr	r1, [sp, #4]
 8000394:	6909      	ldr	r1, [r1, #16]
 8000396:	40a9      	lsls	r1, r5
 8000398:	430f      	orrs	r7, r1
        GPIOx->AFR[position >> 3U] = temp;
 800039a:	6227      	str	r7, [r4, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 800039c:	2403      	movs	r4, #3
 800039e:	005f      	lsls	r7, r3, #1
 80003a0:	40bc      	lsls	r4, r7
 80003a2:	43e4      	mvns	r4, r4
      temp = GPIOx->MODER;
 80003a4:	6805      	ldr	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a6:	3e01      	subs	r6, #1
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 80003a8:	4025      	ands	r5, r4
 80003aa:	46ac      	mov	ip, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ac:	2503      	movs	r5, #3
 80003ae:	4015      	ands	r5, r2
 80003b0:	40bd      	lsls	r5, r7
 80003b2:	4661      	mov	r1, ip
 80003b4:	430d      	orrs	r5, r1
      GPIOx->MODER = temp;
 80003b6:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b8:	2e01      	cmp	r6, #1
 80003ba:	d80f      	bhi.n	80003dc <HAL_GPIO_Init+0x94>
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003bc:	9901      	ldr	r1, [sp, #4]
        temp = GPIOx->OSPEEDR; 
 80003be:	6886      	ldr	r6, [r0, #8]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c0:	68cd      	ldr	r5, [r1, #12]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003c2:	4026      	ands	r6, r4
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 80003c4:	40bd      	lsls	r5, r7
 80003c6:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 80003c8:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ca:	6846      	ldr	r6, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003cc:	9903      	ldr	r1, [sp, #12]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ce:	0915      	lsrs	r5, r2, #4
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80003d0:	438e      	bics	r6, r1
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003d2:	2101      	movs	r1, #1
 80003d4:	400d      	ands	r5, r1
 80003d6:	409d      	lsls	r5, r3
 80003d8:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80003da:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 80003dc:	68c5      	ldr	r5, [r0, #12]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003de:	9901      	ldr	r1, [sp, #4]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003e0:	402c      	ands	r4, r5
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e2:	688d      	ldr	r5, [r1, #8]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e4:	2180      	movs	r1, #128	; 0x80
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003e6:	40bd      	lsls	r5, r7
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003e8:	0549      	lsls	r1, r1, #21
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 80003ea:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 80003ec:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003ee:	420a      	tst	r2, r1
 80003f0:	d04b      	beq.n	800048a <HAL_GPIO_Init+0x142>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f2:	2101      	movs	r1, #1
 80003f4:	4c26      	ldr	r4, [pc, #152]	; (8000490 <HAL_GPIO_Init+0x148>)
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003f6:	2603      	movs	r6, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003f8:	69a5      	ldr	r5, [r4, #24]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fa:	401e      	ands	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003fc:	430d      	orrs	r5, r1
 80003fe:	61a5      	str	r5, [r4, #24]
 8000400:	69a4      	ldr	r4, [r4, #24]
        temp = SYSCFG->EXTICR[position >> 2];
 8000402:	089d      	lsrs	r5, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000404:	400c      	ands	r4, r1
 8000406:	9405      	str	r4, [sp, #20]
 8000408:	9c05      	ldr	r4, [sp, #20]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040a:	240f      	movs	r4, #15
 800040c:	4921      	ldr	r1, [pc, #132]	; (8000494 <HAL_GPIO_Init+0x14c>)
 800040e:	00ad      	lsls	r5, r5, #2
 8000410:	00b6      	lsls	r6, r6, #2
 8000412:	186d      	adds	r5, r5, r1
 8000414:	40b4      	lsls	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000416:	2190      	movs	r1, #144	; 0x90
        temp = SYSCFG->EXTICR[position >> 2];
 8000418:	68af      	ldr	r7, [r5, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041a:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800041c:	43a7      	bics	r7, r4
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800041e:	2400      	movs	r4, #0
 8000420:	4288      	cmp	r0, r1
 8000422:	d00c      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000424:	491c      	ldr	r1, [pc, #112]	; (8000498 <HAL_GPIO_Init+0x150>)
 8000426:	3401      	adds	r4, #1
 8000428:	4288      	cmp	r0, r1
 800042a:	d008      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 800042c:	491b      	ldr	r1, [pc, #108]	; (800049c <HAL_GPIO_Init+0x154>)
 800042e:	3401      	adds	r4, #1
 8000430:	4288      	cmp	r0, r1
 8000432:	d004      	beq.n	800043e <HAL_GPIO_Init+0xf6>
 8000434:	491a      	ldr	r1, [pc, #104]	; (80004a0 <HAL_GPIO_Init+0x158>)
 8000436:	3403      	adds	r4, #3
 8000438:	4288      	cmp	r0, r1
 800043a:	d100      	bne.n	800043e <HAL_GPIO_Init+0xf6>
 800043c:	3c02      	subs	r4, #2
 800043e:	40b4      	lsls	r4, r6
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000440:	9900      	ldr	r1, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000442:	433c      	orrs	r4, r7
          SET_BIT(temp, iocurrent); 
 8000444:	000e      	movs	r6, r1
        SYSCFG->EXTICR[position >> 2] = temp;
 8000446:	60ac      	str	r4, [r5, #8]
        temp = EXTI->IMR;
 8000448:	4c16      	ldr	r4, [pc, #88]	; (80004a4 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800044a:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 800044c:	6827      	ldr	r7, [r4, #0]
          SET_BIT(temp, iocurrent); 
 800044e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000450:	03d1      	lsls	r1, r2, #15
 8000452:	d401      	bmi.n	8000458 <HAL_GPIO_Init+0x110>
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000454:	003e      	movs	r6, r7
 8000456:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 8000458:	6026      	str	r6, [r4, #0]
        temp = EXTI->EMR;
 800045a:	6867      	ldr	r7, [r4, #4]
          SET_BIT(temp, iocurrent); 
 800045c:	9e00      	ldr	r6, [sp, #0]
 800045e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000460:	0391      	lsls	r1, r2, #14
 8000462:	d401      	bmi.n	8000468 <HAL_GPIO_Init+0x120>
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000464:	003e      	movs	r6, r7
 8000466:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 8000468:	6066      	str	r6, [r4, #4]
        temp = EXTI->RTSR;
 800046a:	68a7      	ldr	r7, [r4, #8]
          SET_BIT(temp, iocurrent); 
 800046c:	9e00      	ldr	r6, [sp, #0]
 800046e:	433e      	orrs	r6, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000470:	02d1      	lsls	r1, r2, #11
 8000472:	d401      	bmi.n	8000478 <HAL_GPIO_Init+0x130>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000474:	003e      	movs	r6, r7
 8000476:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 8000478:	60a6      	str	r6, [r4, #8]
        temp = EXTI->FTSR;
 800047a:	68e6      	ldr	r6, [r4, #12]
          SET_BIT(temp, iocurrent); 
 800047c:	9f00      	ldr	r7, [sp, #0]
 800047e:	4337      	orrs	r7, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000480:	0292      	lsls	r2, r2, #10
 8000482:	d401      	bmi.n	8000488 <HAL_GPIO_Init+0x140>
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000484:	402e      	ands	r6, r5
 8000486:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8000488:	60e7      	str	r7, [r4, #12]
    position++;
 800048a:	3301      	adds	r3, #1
 800048c:	e762      	b.n	8000354 <HAL_GPIO_Init+0xc>
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000
 8000498:	48000400 	.word	0x48000400
 800049c:	48000800 	.word	0x48000800
 80004a0:	48000c00 	.word	0x48000c00
 80004a4:	40010400 	.word	0x40010400

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80004a8:	2a00      	cmp	r2, #0
 80004aa:	d001      	beq.n	80004b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80004ae:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80004b2:	e7fc      	b.n	80004ae <HAL_GPIO_WritePin+0x6>

080004b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004b6:	6803      	ldr	r3, [r0, #0]
{
 80004b8:	b085      	sub	sp, #20
 80004ba:	0005      	movs	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004bc:	07db      	lsls	r3, r3, #31
 80004be:	d42f      	bmi.n	8000520 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c0:	682b      	ldr	r3, [r5, #0]
 80004c2:	079b      	lsls	r3, r3, #30
 80004c4:	d500      	bpl.n	80004c8 <HAL_RCC_OscConfig+0x14>
 80004c6:	e081      	b.n	80005cc <HAL_RCC_OscConfig+0x118>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004c8:	682b      	ldr	r3, [r5, #0]
 80004ca:	071b      	lsls	r3, r3, #28
 80004cc:	d500      	bpl.n	80004d0 <HAL_RCC_OscConfig+0x1c>
 80004ce:	e0bc      	b.n	800064a <HAL_RCC_OscConfig+0x196>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004d0:	682b      	ldr	r3, [r5, #0]
 80004d2:	075b      	lsls	r3, r3, #29
 80004d4:	d500      	bpl.n	80004d8 <HAL_RCC_OscConfig+0x24>
 80004d6:	e0df      	b.n	8000698 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80004d8:	682b      	ldr	r3, [r5, #0]
 80004da:	06db      	lsls	r3, r3, #27
 80004dc:	d51a      	bpl.n	8000514 <HAL_RCC_OscConfig+0x60>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80004de:	696a      	ldr	r2, [r5, #20]
 80004e0:	4cb5      	ldr	r4, [pc, #724]	; (80007b8 <HAL_RCC_OscConfig+0x304>)
 80004e2:	2304      	movs	r3, #4
 80004e4:	2a01      	cmp	r2, #1
 80004e6:	d000      	beq.n	80004ea <HAL_RCC_OscConfig+0x36>
 80004e8:	e14b      	b.n	8000782 <HAL_RCC_OscConfig+0x2ce>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80004ea:	6b61      	ldr	r1, [r4, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004ec:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80004ee:	430b      	orrs	r3, r1
 80004f0:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80004f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80004f4:	431a      	orrs	r2, r3
 80004f6:	6362      	str	r2, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 80004f8:	f7ff fec6 	bl	8000288 <HAL_GetTick>
 80004fc:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80004fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000500:	4233      	tst	r3, r6
 8000502:	d100      	bne.n	8000506 <HAL_RCC_OscConfig+0x52>
 8000504:	e136      	b.n	8000774 <HAL_RCC_OscConfig+0x2c0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000506:	21f8      	movs	r1, #248	; 0xf8
 8000508:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800050a:	69ab      	ldr	r3, [r5, #24]
 800050c:	438a      	bics	r2, r1
 800050e:	00db      	lsls	r3, r3, #3
 8000510:	4313      	orrs	r3, r2
 8000512:	6363      	str	r3, [r4, #52]	; 0x34
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000514:	6a29      	ldr	r1, [r5, #32]
 8000516:	2900      	cmp	r1, #0
 8000518:	d000      	beq.n	800051c <HAL_RCC_OscConfig+0x68>
 800051a:	e159      	b.n	80007d0 <HAL_RCC_OscConfig+0x31c>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 800051c:	2000      	movs	r0, #0
 800051e:	e013      	b.n	8000548 <HAL_RCC_OscConfig+0x94>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000520:	210c      	movs	r1, #12
 8000522:	4ca5      	ldr	r4, [pc, #660]	; (80007b8 <HAL_RCC_OscConfig+0x304>)
 8000524:	6862      	ldr	r2, [r4, #4]
 8000526:	400a      	ands	r2, r1
 8000528:	2a04      	cmp	r2, #4
 800052a:	d006      	beq.n	800053a <HAL_RCC_OscConfig+0x86>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800052c:	6863      	ldr	r3, [r4, #4]
 800052e:	400b      	ands	r3, r1
 8000530:	2b08      	cmp	r3, #8
 8000532:	d10b      	bne.n	800054c <HAL_RCC_OscConfig+0x98>
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	03db      	lsls	r3, r3, #15
 8000538:	d508      	bpl.n	800054c <HAL_RCC_OscConfig+0x98>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800053a:	6823      	ldr	r3, [r4, #0]
 800053c:	039b      	lsls	r3, r3, #14
 800053e:	d5bf      	bpl.n	80004c0 <HAL_RCC_OscConfig+0xc>
 8000540:	686b      	ldr	r3, [r5, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d1bc      	bne.n	80004c0 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000546:	2001      	movs	r0, #1
}
 8000548:	b005      	add	sp, #20
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054c:	686b      	ldr	r3, [r5, #4]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d113      	bne.n	800057a <HAL_RCC_OscConfig+0xc6>
 8000552:	2380      	movs	r3, #128	; 0x80
 8000554:	6822      	ldr	r2, [r4, #0]
 8000556:	025b      	lsls	r3, r3, #9
 8000558:	4313      	orrs	r3, r2
 800055a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800055c:	f7ff fe94 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000560:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 8000562:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000564:	02b6      	lsls	r6, r6, #10
 8000566:	6823      	ldr	r3, [r4, #0]
 8000568:	4233      	tst	r3, r6
 800056a:	d1a9      	bne.n	80004c0 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800056c:	f7ff fe8c 	bl	8000288 <HAL_GetTick>
 8000570:	1bc0      	subs	r0, r0, r7
 8000572:	2864      	cmp	r0, #100	; 0x64
 8000574:	d9f7      	bls.n	8000566 <HAL_RCC_OscConfig+0xb2>
            return HAL_TIMEOUT;
 8000576:	2003      	movs	r0, #3
 8000578:	e7e6      	b.n	8000548 <HAL_RCC_OscConfig+0x94>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800057a:	2b00      	cmp	r3, #0
 800057c:	d116      	bne.n	80005ac <HAL_RCC_OscConfig+0xf8>
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	4a8e      	ldr	r2, [pc, #568]	; (80007bc <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000582:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000584:	4013      	ands	r3, r2
 8000586:	6023      	str	r3, [r4, #0]
 8000588:	6823      	ldr	r3, [r4, #0]
 800058a:	4a8d      	ldr	r2, [pc, #564]	; (80007c0 <HAL_RCC_OscConfig+0x30c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800058c:	02b6      	lsls	r6, r6, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800058e:	4013      	ands	r3, r2
 8000590:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000592:	f7ff fe79 	bl	8000288 <HAL_GetTick>
 8000596:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000598:	6823      	ldr	r3, [r4, #0]
 800059a:	4233      	tst	r3, r6
 800059c:	d100      	bne.n	80005a0 <HAL_RCC_OscConfig+0xec>
 800059e:	e78f      	b.n	80004c0 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005a0:	f7ff fe72 	bl	8000288 <HAL_GetTick>
 80005a4:	1bc0      	subs	r0, r0, r7
 80005a6:	2864      	cmp	r0, #100	; 0x64
 80005a8:	d9f6      	bls.n	8000598 <HAL_RCC_OscConfig+0xe4>
 80005aa:	e7e4      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ac:	2b05      	cmp	r3, #5
 80005ae:	d105      	bne.n	80005bc <HAL_RCC_OscConfig+0x108>
 80005b0:	2380      	movs	r3, #128	; 0x80
 80005b2:	6822      	ldr	r2, [r4, #0]
 80005b4:	02db      	lsls	r3, r3, #11
 80005b6:	4313      	orrs	r3, r2
 80005b8:	6023      	str	r3, [r4, #0]
 80005ba:	e7ca      	b.n	8000552 <HAL_RCC_OscConfig+0x9e>
 80005bc:	6823      	ldr	r3, [r4, #0]
 80005be:	4a7f      	ldr	r2, [pc, #508]	; (80007bc <HAL_RCC_OscConfig+0x308>)
 80005c0:	4013      	ands	r3, r2
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	6823      	ldr	r3, [r4, #0]
 80005c6:	4a7e      	ldr	r2, [pc, #504]	; (80007c0 <HAL_RCC_OscConfig+0x30c>)
 80005c8:	4013      	ands	r3, r2
 80005ca:	e7c6      	b.n	800055a <HAL_RCC_OscConfig+0xa6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005cc:	220c      	movs	r2, #12
 80005ce:	4c7a      	ldr	r4, [pc, #488]	; (80007b8 <HAL_RCC_OscConfig+0x304>)
 80005d0:	6863      	ldr	r3, [r4, #4]
 80005d2:	4213      	tst	r3, r2
 80005d4:	d006      	beq.n	80005e4 <HAL_RCC_OscConfig+0x130>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005d6:	6863      	ldr	r3, [r4, #4]
 80005d8:	4013      	ands	r3, r2
 80005da:	2b08      	cmp	r3, #8
 80005dc:	d110      	bne.n	8000600 <HAL_RCC_OscConfig+0x14c>
 80005de:	6863      	ldr	r3, [r4, #4]
 80005e0:	03db      	lsls	r3, r3, #15
 80005e2:	d40d      	bmi.n	8000600 <HAL_RCC_OscConfig+0x14c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005e4:	6823      	ldr	r3, [r4, #0]
 80005e6:	079b      	lsls	r3, r3, #30
 80005e8:	d502      	bpl.n	80005f0 <HAL_RCC_OscConfig+0x13c>
 80005ea:	68eb      	ldr	r3, [r5, #12]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d1aa      	bne.n	8000546 <HAL_RCC_OscConfig+0x92>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80005f0:	21f8      	movs	r1, #248	; 0xf8
 80005f2:	6822      	ldr	r2, [r4, #0]
 80005f4:	692b      	ldr	r3, [r5, #16]
 80005f6:	438a      	bics	r2, r1
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	4313      	orrs	r3, r2
 80005fc:	6023      	str	r3, [r4, #0]
 80005fe:	e763      	b.n	80004c8 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000600:	68ea      	ldr	r2, [r5, #12]
 8000602:	2301      	movs	r3, #1
 8000604:	2a00      	cmp	r2, #0
 8000606:	d00f      	beq.n	8000628 <HAL_RCC_OscConfig+0x174>
        __HAL_RCC_HSI_ENABLE();
 8000608:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800060a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_ENABLE();
 800060c:	4313      	orrs	r3, r2
 800060e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000610:	f7ff fe3a 	bl	8000288 <HAL_GetTick>
 8000614:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000616:	6823      	ldr	r3, [r4, #0]
 8000618:	4233      	tst	r3, r6
 800061a:	d1e9      	bne.n	80005f0 <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800061c:	f7ff fe34 	bl	8000288 <HAL_GetTick>
 8000620:	1bc0      	subs	r0, r0, r7
 8000622:	2802      	cmp	r0, #2
 8000624:	d9f7      	bls.n	8000616 <HAL_RCC_OscConfig+0x162>
 8000626:	e7a6      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_DISABLE();
 8000628:	6822      	ldr	r2, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800062a:	2602      	movs	r6, #2
        __HAL_RCC_HSI_DISABLE();
 800062c:	439a      	bics	r2, r3
 800062e:	6022      	str	r2, [r4, #0]
        tickstart = HAL_GetTick();
 8000630:	f7ff fe2a 	bl	8000288 <HAL_GetTick>
 8000634:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000636:	6823      	ldr	r3, [r4, #0]
 8000638:	4233      	tst	r3, r6
 800063a:	d100      	bne.n	800063e <HAL_RCC_OscConfig+0x18a>
 800063c:	e744      	b.n	80004c8 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800063e:	f7ff fe23 	bl	8000288 <HAL_GetTick>
 8000642:	1bc0      	subs	r0, r0, r7
 8000644:	2802      	cmp	r0, #2
 8000646:	d9f6      	bls.n	8000636 <HAL_RCC_OscConfig+0x182>
 8000648:	e795      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800064a:	69ea      	ldr	r2, [r5, #28]
 800064c:	2301      	movs	r3, #1
 800064e:	4c5a      	ldr	r4, [pc, #360]	; (80007b8 <HAL_RCC_OscConfig+0x304>)
 8000650:	2a00      	cmp	r2, #0
 8000652:	d010      	beq.n	8000676 <HAL_RCC_OscConfig+0x1c2>
      __HAL_RCC_LSI_ENABLE();
 8000654:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000656:	2602      	movs	r6, #2
      __HAL_RCC_LSI_ENABLE();
 8000658:	4313      	orrs	r3, r2
 800065a:	6263      	str	r3, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800065c:	f7ff fe14 	bl	8000288 <HAL_GetTick>
 8000660:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000662:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000664:	4233      	tst	r3, r6
 8000666:	d000      	beq.n	800066a <HAL_RCC_OscConfig+0x1b6>
 8000668:	e732      	b.n	80004d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800066a:	f7ff fe0d 	bl	8000288 <HAL_GetTick>
 800066e:	1bc0      	subs	r0, r0, r7
 8000670:	2802      	cmp	r0, #2
 8000672:	d9f6      	bls.n	8000662 <HAL_RCC_OscConfig+0x1ae>
 8000674:	e77f      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
      __HAL_RCC_LSI_DISABLE();
 8000676:	6a62      	ldr	r2, [r4, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000678:	2602      	movs	r6, #2
      __HAL_RCC_LSI_DISABLE();
 800067a:	439a      	bics	r2, r3
 800067c:	6262      	str	r2, [r4, #36]	; 0x24
      tickstart = HAL_GetTick();
 800067e:	f7ff fe03 	bl	8000288 <HAL_GetTick>
 8000682:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000686:	4233      	tst	r3, r6
 8000688:	d100      	bne.n	800068c <HAL_RCC_OscConfig+0x1d8>
 800068a:	e721      	b.n	80004d0 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800068c:	f7ff fdfc 	bl	8000288 <HAL_GetTick>
 8000690:	1bc0      	subs	r0, r0, r7
 8000692:	2802      	cmp	r0, #2
 8000694:	d9f6      	bls.n	8000684 <HAL_RCC_OscConfig+0x1d0>
 8000696:	e76e      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000698:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800069a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800069c:	4c46      	ldr	r4, [pc, #280]	; (80007b8 <HAL_RCC_OscConfig+0x304>)
 800069e:	0552      	lsls	r2, r2, #21
 80006a0:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80006a2:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80006a4:	4213      	tst	r3, r2
 80006a6:	d108      	bne.n	80006ba <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	69e3      	ldr	r3, [r4, #28]
 80006aa:	4313      	orrs	r3, r2
 80006ac:	61e3      	str	r3, [r4, #28]
 80006ae:	69e3      	ldr	r3, [r4, #28]
 80006b0:	4013      	ands	r3, r2
 80006b2:	9303      	str	r3, [sp, #12]
 80006b4:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80006b6:	2301      	movs	r3, #1
 80006b8:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006ba:	2780      	movs	r7, #128	; 0x80
 80006bc:	4e41      	ldr	r6, [pc, #260]	; (80007c4 <HAL_RCC_OscConfig+0x310>)
 80006be:	007f      	lsls	r7, r7, #1
 80006c0:	6833      	ldr	r3, [r6, #0]
 80006c2:	423b      	tst	r3, r7
 80006c4:	d006      	beq.n	80006d4 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006c6:	68ab      	ldr	r3, [r5, #8]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d113      	bne.n	80006f4 <HAL_RCC_OscConfig+0x240>
 80006cc:	6a22      	ldr	r2, [r4, #32]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	6223      	str	r3, [r4, #32]
 80006d2:	e030      	b.n	8000736 <HAL_RCC_OscConfig+0x282>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80006d4:	6833      	ldr	r3, [r6, #0]
 80006d6:	433b      	orrs	r3, r7
 80006d8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80006da:	f7ff fdd5 	bl	8000288 <HAL_GetTick>
 80006de:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80006e0:	6833      	ldr	r3, [r6, #0]
 80006e2:	423b      	tst	r3, r7
 80006e4:	d1ef      	bne.n	80006c6 <HAL_RCC_OscConfig+0x212>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80006e6:	f7ff fdcf 	bl	8000288 <HAL_GetTick>
 80006ea:	9b01      	ldr	r3, [sp, #4]
 80006ec:	1ac0      	subs	r0, r0, r3
 80006ee:	2864      	cmp	r0, #100	; 0x64
 80006f0:	d9f6      	bls.n	80006e0 <HAL_RCC_OscConfig+0x22c>
 80006f2:	e740      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
 80006f4:	2201      	movs	r2, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d114      	bne.n	8000724 <HAL_RCC_OscConfig+0x270>
 80006fa:	6a23      	ldr	r3, [r4, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80006fc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80006fe:	4393      	bics	r3, r2
 8000700:	6223      	str	r3, [r4, #32]
 8000702:	6a23      	ldr	r3, [r4, #32]
 8000704:	3203      	adds	r2, #3
 8000706:	4393      	bics	r3, r2
 8000708:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800070a:	f7ff fdbd 	bl	8000288 <HAL_GetTick>
 800070e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000710:	6a23      	ldr	r3, [r4, #32]
 8000712:	423b      	tst	r3, r7
 8000714:	d025      	beq.n	8000762 <HAL_RCC_OscConfig+0x2ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000716:	f7ff fdb7 	bl	8000288 <HAL_GetTick>
 800071a:	4b2b      	ldr	r3, [pc, #172]	; (80007c8 <HAL_RCC_OscConfig+0x314>)
 800071c:	1b80      	subs	r0, r0, r6
 800071e:	4298      	cmp	r0, r3
 8000720:	d9f6      	bls.n	8000710 <HAL_RCC_OscConfig+0x25c>
 8000722:	e728      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000724:	2b05      	cmp	r3, #5
 8000726:	d10b      	bne.n	8000740 <HAL_RCC_OscConfig+0x28c>
 8000728:	6a21      	ldr	r1, [r4, #32]
 800072a:	3b01      	subs	r3, #1
 800072c:	430b      	orrs	r3, r1
 800072e:	6223      	str	r3, [r4, #32]
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	431a      	orrs	r2, r3
 8000734:	6222      	str	r2, [r4, #32]
      tickstart = HAL_GetTick();
 8000736:	f7ff fda7 	bl	8000288 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800073a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800073c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800073e:	e00d      	b.n	800075c <HAL_RCC_OscConfig+0x2a8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000740:	6a23      	ldr	r3, [r4, #32]
 8000742:	4393      	bics	r3, r2
 8000744:	2204      	movs	r2, #4
 8000746:	6223      	str	r3, [r4, #32]
 8000748:	6a23      	ldr	r3, [r4, #32]
 800074a:	4393      	bics	r3, r2
 800074c:	e7c0      	b.n	80006d0 <HAL_RCC_OscConfig+0x21c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800074e:	f7ff fd9b 	bl	8000288 <HAL_GetTick>
 8000752:	4b1d      	ldr	r3, [pc, #116]	; (80007c8 <HAL_RCC_OscConfig+0x314>)
 8000754:	1b80      	subs	r0, r0, r6
 8000756:	4298      	cmp	r0, r3
 8000758:	d900      	bls.n	800075c <HAL_RCC_OscConfig+0x2a8>
 800075a:	e70c      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800075c:	6a23      	ldr	r3, [r4, #32]
 800075e:	423b      	tst	r3, r7
 8000760:	d0f5      	beq.n	800074e <HAL_RCC_OscConfig+0x29a>
    if(pwrclkchanged == SET)
 8000762:	9b00      	ldr	r3, [sp, #0]
 8000764:	2b01      	cmp	r3, #1
 8000766:	d000      	beq.n	800076a <HAL_RCC_OscConfig+0x2b6>
 8000768:	e6b6      	b.n	80004d8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800076a:	69e3      	ldr	r3, [r4, #28]
 800076c:	4a17      	ldr	r2, [pc, #92]	; (80007cc <HAL_RCC_OscConfig+0x318>)
 800076e:	4013      	ands	r3, r2
 8000770:	61e3      	str	r3, [r4, #28]
 8000772:	e6b1      	b.n	80004d8 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000774:	f7ff fd88 	bl	8000288 <HAL_GetTick>
 8000778:	1bc0      	subs	r0, r0, r7
 800077a:	2802      	cmp	r0, #2
 800077c:	d800      	bhi.n	8000780 <HAL_RCC_OscConfig+0x2cc>
 800077e:	e6be      	b.n	80004fe <HAL_RCC_OscConfig+0x4a>
 8000780:	e6f9      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000782:	3205      	adds	r2, #5
 8000784:	d103      	bne.n	800078e <HAL_RCC_OscConfig+0x2da>
      __HAL_RCC_HSI14ADC_ENABLE();
 8000786:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8000788:	439a      	bics	r2, r3
 800078a:	6362      	str	r2, [r4, #52]	; 0x34
 800078c:	e6bb      	b.n	8000506 <HAL_RCC_OscConfig+0x52>
      __HAL_RCC_HSI14ADC_DISABLE();
 800078e:	6b62      	ldr	r2, [r4, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000790:	2602      	movs	r6, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8000792:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8000794:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8000796:	6363      	str	r3, [r4, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8000798:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800079a:	4393      	bics	r3, r2
 800079c:	6363      	str	r3, [r4, #52]	; 0x34
      tickstart = HAL_GetTick();
 800079e:	f7ff fd73 	bl	8000288 <HAL_GetTick>
 80007a2:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80007a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80007a6:	4233      	tst	r3, r6
 80007a8:	d100      	bne.n	80007ac <HAL_RCC_OscConfig+0x2f8>
 80007aa:	e6b3      	b.n	8000514 <HAL_RCC_OscConfig+0x60>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80007ac:	f7ff fd6c 	bl	8000288 <HAL_GetTick>
 80007b0:	1bc0      	subs	r0, r0, r7
 80007b2:	2802      	cmp	r0, #2
 80007b4:	d9f6      	bls.n	80007a4 <HAL_RCC_OscConfig+0x2f0>
 80007b6:	e6de      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
 80007b8:	40021000 	.word	0x40021000
 80007bc:	fffeffff 	.word	0xfffeffff
 80007c0:	fffbffff 	.word	0xfffbffff
 80007c4:	40007000 	.word	0x40007000
 80007c8:	00001388 	.word	0x00001388
 80007cc:	efffffff 	.word	0xefffffff
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007d0:	220c      	movs	r2, #12
 80007d2:	4c26      	ldr	r4, [pc, #152]	; (800086c <HAL_RCC_OscConfig+0x3b8>)
      return HAL_ERROR;
 80007d4:	2001      	movs	r0, #1
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80007d6:	6863      	ldr	r3, [r4, #4]
 80007d8:	4013      	ands	r3, r2
 80007da:	2b08      	cmp	r3, #8
 80007dc:	d100      	bne.n	80007e0 <HAL_RCC_OscConfig+0x32c>
 80007de:	e6b3      	b.n	8000548 <HAL_RCC_OscConfig+0x94>
        __HAL_RCC_PLL_DISABLE();
 80007e0:	6823      	ldr	r3, [r4, #0]
 80007e2:	4a23      	ldr	r2, [pc, #140]	; (8000870 <HAL_RCC_OscConfig+0x3bc>)
 80007e4:	4013      	ands	r3, r2
 80007e6:	6023      	str	r3, [r4, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80007e8:	2902      	cmp	r1, #2
 80007ea:	d12f      	bne.n	800084c <HAL_RCC_OscConfig+0x398>
        tickstart = HAL_GetTick();
 80007ec:	f7ff fd4c 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f0:	2680      	movs	r6, #128	; 0x80
        tickstart = HAL_GetTick();
 80007f2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80007f4:	04b6      	lsls	r6, r6, #18
 80007f6:	6823      	ldr	r3, [r4, #0]
 80007f8:	4233      	tst	r3, r6
 80007fa:	d121      	bne.n	8000840 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80007fc:	220f      	movs	r2, #15
 80007fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000800:	4393      	bics	r3, r2
 8000802:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8000804:	4313      	orrs	r3, r2
 8000806:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000808:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800080a:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800080c:	6862      	ldr	r2, [r4, #4]
 800080e:	430b      	orrs	r3, r1
 8000810:	4918      	ldr	r1, [pc, #96]	; (8000874 <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000812:	2580      	movs	r5, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000814:	400a      	ands	r2, r1
 8000816:	4313      	orrs	r3, r2
 8000818:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800081a:	2380      	movs	r3, #128	; 0x80
 800081c:	6822      	ldr	r2, [r4, #0]
 800081e:	045b      	lsls	r3, r3, #17
 8000820:	4313      	orrs	r3, r2
 8000822:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000824:	f7ff fd30 	bl	8000288 <HAL_GetTick>
 8000828:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800082a:	04ad      	lsls	r5, r5, #18
 800082c:	6823      	ldr	r3, [r4, #0]
 800082e:	422b      	tst	r3, r5
 8000830:	d000      	beq.n	8000834 <HAL_RCC_OscConfig+0x380>
 8000832:	e673      	b.n	800051c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000834:	f7ff fd28 	bl	8000288 <HAL_GetTick>
 8000838:	1b80      	subs	r0, r0, r6
 800083a:	2802      	cmp	r0, #2
 800083c:	d9f6      	bls.n	800082c <HAL_RCC_OscConfig+0x378>
 800083e:	e69a      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000840:	f7ff fd22 	bl	8000288 <HAL_GetTick>
 8000844:	1bc0      	subs	r0, r0, r7
 8000846:	2802      	cmp	r0, #2
 8000848:	d9d5      	bls.n	80007f6 <HAL_RCC_OscConfig+0x342>
 800084a:	e694      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
        tickstart = HAL_GetTick();
 800084c:	f7ff fd1c 	bl	8000288 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000850:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8000852:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000854:	04ad      	lsls	r5, r5, #18
 8000856:	6823      	ldr	r3, [r4, #0]
 8000858:	422b      	tst	r3, r5
 800085a:	d100      	bne.n	800085e <HAL_RCC_OscConfig+0x3aa>
 800085c:	e65e      	b.n	800051c <HAL_RCC_OscConfig+0x68>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800085e:	f7ff fd13 	bl	8000288 <HAL_GetTick>
 8000862:	1b80      	subs	r0, r0, r6
 8000864:	2802      	cmp	r0, #2
 8000866:	d9f6      	bls.n	8000856 <HAL_RCC_OscConfig+0x3a2>
 8000868:	e685      	b.n	8000576 <HAL_RCC_OscConfig+0xc2>
 800086a:	46c0      	nop			; (mov r8, r8)
 800086c:	40021000 	.word	0x40021000
 8000870:	feffffff 	.word	0xfeffffff
 8000874:	ffc2ffff 	.word	0xffc2ffff

08000878 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000878:	b570      	push	{r4, r5, r6, lr}
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800087a:	4c14      	ldr	r4, [pc, #80]	; (80008cc <HAL_RCC_GetSysClockFreq+0x54>)
{
 800087c:	b088      	sub	sp, #32
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800087e:	2210      	movs	r2, #16
 8000880:	0021      	movs	r1, r4
 8000882:	4668      	mov	r0, sp
 8000884:	f001 f874 	bl	8001970 <memcpy>
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000888:	0021      	movs	r1, r4
 800088a:	ad04      	add	r5, sp, #16
 800088c:	2210      	movs	r2, #16
 800088e:	3110      	adds	r1, #16
 8000890:	0028      	movs	r0, r5
 8000892:	f001 f86d 	bl	8001970 <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000896:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8000898:	4e0d      	ldr	r6, [pc, #52]	; (80008d0 <HAL_RCC_GetSysClockFreq+0x58>)
 800089a:	6873      	ldr	r3, [r6, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800089c:	401a      	ands	r2, r3
 800089e:	2a08      	cmp	r2, #8
 80008a0:	d111      	bne.n	80008c6 <HAL_RCC_GetSysClockFreq+0x4e>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80008a2:	200f      	movs	r0, #15
 80008a4:	466a      	mov	r2, sp
 80008a6:	0c99      	lsrs	r1, r3, #18
 80008a8:	4001      	ands	r1, r0
 80008aa:	5c54      	ldrb	r4, [r2, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80008ac:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80008ae:	4002      	ands	r2, r0
 80008b0:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	d505      	bpl.n	80008c2 <HAL_RCC_GetSysClockFreq+0x4a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80008b6:	4807      	ldr	r0, [pc, #28]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x5c>)
 80008b8:	f7ff fc30 	bl	800011c <__udivsi3>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008bc:	4360      	muls	r0, r4
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80008be:	b008      	add	sp, #32
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <HAL_RCC_GetSysClockFreq+0x60>)
 80008c4:	e7fa      	b.n	80008bc <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSE_VALUE;
 80008c6:	4803      	ldr	r0, [pc, #12]	; (80008d4 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 80008c8:	e7f9      	b.n	80008be <HAL_RCC_GetSysClockFreq+0x46>
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	080019ac 	.word	0x080019ac
 80008d0:	40021000 	.word	0x40021000
 80008d4:	007a1200 	.word	0x007a1200
 80008d8:	003d0900 	.word	0x003d0900

080008dc <HAL_RCC_ClockConfig>:
{
 80008dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008de:	2201      	movs	r2, #1
 80008e0:	4c43      	ldr	r4, [pc, #268]	; (80009f0 <HAL_RCC_ClockConfig+0x114>)
{
 80008e2:	0006      	movs	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e4:	6823      	ldr	r3, [r4, #0]
{
 80008e6:	000f      	movs	r7, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 80008e8:	4013      	ands	r3, r2
 80008ea:	428b      	cmp	r3, r1
 80008ec:	d31c      	bcc.n	8000928 <HAL_RCC_ClockConfig+0x4c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80008ee:	6832      	ldr	r2, [r6, #0]
 80008f0:	0793      	lsls	r3, r2, #30
 80008f2:	d423      	bmi.n	800093c <HAL_RCC_ClockConfig+0x60>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80008f4:	07d3      	lsls	r3, r2, #31
 80008f6:	d429      	bmi.n	800094c <HAL_RCC_ClockConfig+0x70>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80008f8:	2301      	movs	r3, #1
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	401a      	ands	r2, r3
 80008fe:	4297      	cmp	r7, r2
 8000900:	d367      	bcc.n	80009d2 <HAL_RCC_ClockConfig+0xf6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000902:	6833      	ldr	r3, [r6, #0]
 8000904:	4c3b      	ldr	r4, [pc, #236]	; (80009f4 <HAL_RCC_ClockConfig+0x118>)
 8000906:	075b      	lsls	r3, r3, #29
 8000908:	d46a      	bmi.n	80009e0 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800090a:	f7ff ffb5 	bl	8000878 <HAL_RCC_GetSysClockFreq>
 800090e:	6863      	ldr	r3, [r4, #4]
 8000910:	4a39      	ldr	r2, [pc, #228]	; (80009f8 <HAL_RCC_ClockConfig+0x11c>)
 8000912:	061b      	lsls	r3, r3, #24
 8000914:	0f1b      	lsrs	r3, r3, #28
 8000916:	5cd3      	ldrb	r3, [r2, r3]
 8000918:	40d8      	lsrs	r0, r3
 800091a:	4b38      	ldr	r3, [pc, #224]	; (80009fc <HAL_RCC_ClockConfig+0x120>)
 800091c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800091e:	2000      	movs	r0, #0
 8000920:	f7ff fc88 	bl	8000234 <HAL_InitTick>
  return HAL_OK;
 8000924:	2000      	movs	r0, #0
 8000926:	e008      	b.n	800093a <HAL_RCC_ClockConfig+0x5e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000928:	6823      	ldr	r3, [r4, #0]
 800092a:	4393      	bics	r3, r2
 800092c:	430b      	orrs	r3, r1
 800092e:	6023      	str	r3, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	4013      	ands	r3, r2
 8000934:	4299      	cmp	r1, r3
 8000936:	d0da      	beq.n	80008ee <HAL_RCC_ClockConfig+0x12>
      return HAL_ERROR;
 8000938:	2001      	movs	r0, #1
}
 800093a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800093c:	20f0      	movs	r0, #240	; 0xf0
 800093e:	492d      	ldr	r1, [pc, #180]	; (80009f4 <HAL_RCC_ClockConfig+0x118>)
 8000940:	684b      	ldr	r3, [r1, #4]
 8000942:	4383      	bics	r3, r0
 8000944:	68b0      	ldr	r0, [r6, #8]
 8000946:	4303      	orrs	r3, r0
 8000948:	604b      	str	r3, [r1, #4]
 800094a:	e7d3      	b.n	80008f4 <HAL_RCC_ClockConfig+0x18>
 800094c:	4d29      	ldr	r5, [pc, #164]	; (80009f4 <HAL_RCC_ClockConfig+0x118>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800094e:	6872      	ldr	r2, [r6, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000950:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000952:	2a01      	cmp	r2, #1
 8000954:	d11a      	bne.n	800098c <HAL_RCC_ClockConfig+0xb0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000956:	039b      	lsls	r3, r3, #14
 8000958:	d5ee      	bpl.n	8000938 <HAL_RCC_ClockConfig+0x5c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800095a:	2103      	movs	r1, #3
 800095c:	686b      	ldr	r3, [r5, #4]
 800095e:	438b      	bics	r3, r1
 8000960:	4313      	orrs	r3, r2
 8000962:	606b      	str	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000964:	f7ff fc90 	bl	8000288 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000968:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 800096a:	9001      	str	r0, [sp, #4]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800096c:	2b01      	cmp	r3, #1
 800096e:	d115      	bne.n	800099c <HAL_RCC_ClockConfig+0xc0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000970:	220c      	movs	r2, #12
 8000972:	686b      	ldr	r3, [r5, #4]
 8000974:	4013      	ands	r3, r2
 8000976:	2b04      	cmp	r3, #4
 8000978:	d0be      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800097a:	f7ff fc85 	bl	8000288 <HAL_GetTick>
 800097e:	9b01      	ldr	r3, [sp, #4]
 8000980:	1ac0      	subs	r0, r0, r3
 8000982:	4b1f      	ldr	r3, [pc, #124]	; (8000a00 <HAL_RCC_ClockConfig+0x124>)
 8000984:	4298      	cmp	r0, r3
 8000986:	d9f3      	bls.n	8000970 <HAL_RCC_ClockConfig+0x94>
          return HAL_TIMEOUT;
 8000988:	2003      	movs	r0, #3
 800098a:	e7d6      	b.n	800093a <HAL_RCC_ClockConfig+0x5e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800098c:	2a02      	cmp	r2, #2
 800098e:	d102      	bne.n	8000996 <HAL_RCC_ClockConfig+0xba>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000990:	019b      	lsls	r3, r3, #6
 8000992:	d4e2      	bmi.n	800095a <HAL_RCC_ClockConfig+0x7e>
 8000994:	e7d0      	b.n	8000938 <HAL_RCC_ClockConfig+0x5c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000996:	079b      	lsls	r3, r3, #30
 8000998:	d4df      	bmi.n	800095a <HAL_RCC_ClockConfig+0x7e>
 800099a:	e7cd      	b.n	8000938 <HAL_RCC_ClockConfig+0x5c>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800099c:	2b02      	cmp	r3, #2
 800099e:	d012      	beq.n	80009c6 <HAL_RCC_ClockConfig+0xea>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80009a0:	220c      	movs	r2, #12
 80009a2:	686b      	ldr	r3, [r5, #4]
 80009a4:	4213      	tst	r3, r2
 80009a6:	d0a7      	beq.n	80008f8 <HAL_RCC_ClockConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009a8:	f7ff fc6e 	bl	8000288 <HAL_GetTick>
 80009ac:	9b01      	ldr	r3, [sp, #4]
 80009ae:	1ac0      	subs	r0, r0, r3
 80009b0:	4b13      	ldr	r3, [pc, #76]	; (8000a00 <HAL_RCC_ClockConfig+0x124>)
 80009b2:	4298      	cmp	r0, r3
 80009b4:	d9f4      	bls.n	80009a0 <HAL_RCC_ClockConfig+0xc4>
 80009b6:	e7e7      	b.n	8000988 <HAL_RCC_ClockConfig+0xac>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80009b8:	f7ff fc66 	bl	8000288 <HAL_GetTick>
 80009bc:	9b01      	ldr	r3, [sp, #4]
 80009be:	1ac0      	subs	r0, r0, r3
 80009c0:	4b0f      	ldr	r3, [pc, #60]	; (8000a00 <HAL_RCC_ClockConfig+0x124>)
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d8e0      	bhi.n	8000988 <HAL_RCC_ClockConfig+0xac>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009c6:	220c      	movs	r2, #12
 80009c8:	686b      	ldr	r3, [r5, #4]
 80009ca:	4013      	ands	r3, r2
 80009cc:	2b08      	cmp	r3, #8
 80009ce:	d1f3      	bne.n	80009b8 <HAL_RCC_ClockConfig+0xdc>
 80009d0:	e792      	b.n	80008f8 <HAL_RCC_ClockConfig+0x1c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80009d2:	6822      	ldr	r2, [r4, #0]
 80009d4:	439a      	bics	r2, r3
 80009d6:	6022      	str	r2, [r4, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80009d8:	6822      	ldr	r2, [r4, #0]
 80009da:	421a      	tst	r2, r3
 80009dc:	d1ac      	bne.n	8000938 <HAL_RCC_ClockConfig+0x5c>
 80009de:	e790      	b.n	8000902 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80009e0:	6863      	ldr	r3, [r4, #4]
 80009e2:	4a08      	ldr	r2, [pc, #32]	; (8000a04 <HAL_RCC_ClockConfig+0x128>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	68f2      	ldr	r2, [r6, #12]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	6063      	str	r3, [r4, #4]
 80009ec:	e78d      	b.n	800090a <HAL_RCC_ClockConfig+0x2e>
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40022000 	.word	0x40022000
 80009f4:	40021000 	.word	0x40021000
 80009f8:	080019cc 	.word	0x080019cc
 80009fc:	20000000 	.word	0x20000000
 8000a00:	00001388 	.word	0x00001388
 8000a04:	fffff8ff 	.word	0xfffff8ff

08000a08 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8000a08:	4b01      	ldr	r3, [pc, #4]	; (8000a10 <HAL_RCC_GetHCLKFreq+0x8>)
 8000a0a:	6818      	ldr	r0, [r3, #0]
}
 8000a0c:	4770      	bx	lr
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	20000000 	.word	0x20000000

08000a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8000a14:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a16:	6803      	ldr	r3, [r0, #0]
{
 8000a18:	b085      	sub	sp, #20
 8000a1a:	0005      	movs	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000a1c:	03db      	lsls	r3, r3, #15
 8000a1e:	d528      	bpl.n	8000a72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a20:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8000a22:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a24:	4c37      	ldr	r4, [pc, #220]	; (8000b04 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a26:	0552      	lsls	r2, r2, #21
 8000a28:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8000a2a:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a2c:	4213      	tst	r3, r2
 8000a2e:	d108      	bne.n	8000a42 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8000a30:	69e3      	ldr	r3, [r4, #28]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	61e3      	str	r3, [r4, #28]
 8000a36:	69e3      	ldr	r3, [r4, #28]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	9303      	str	r3, [sp, #12]
 8000a3c:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a42:	2780      	movs	r7, #128	; 0x80
 8000a44:	4e30      	ldr	r6, [pc, #192]	; (8000b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>)
 8000a46:	007f      	lsls	r7, r7, #1
 8000a48:	6833      	ldr	r3, [r6, #0]
 8000a4a:	423b      	tst	r3, r7
 8000a4c:	d026      	beq.n	8000a9c <HAL_RCCEx_PeriphCLKConfig+0x88>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000a4e:	22c0      	movs	r2, #192	; 0xc0
 8000a50:	6a23      	ldr	r3, [r4, #32]
 8000a52:	0092      	lsls	r2, r2, #2
 8000a54:	4013      	ands	r3, r2
 8000a56:	4e2d      	ldr	r6, [pc, #180]	; (8000b0c <HAL_RCCEx_PeriphCLKConfig+0xf8>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000a58:	d132      	bne.n	8000ac0 <HAL_RCCEx_PeriphCLKConfig+0xac>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a5a:	6a23      	ldr	r3, [r4, #32]
 8000a5c:	401e      	ands	r6, r3
 8000a5e:	686b      	ldr	r3, [r5, #4]
 8000a60:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a62:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8000a64:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d103      	bne.n	8000a72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a6a:	69e3      	ldr	r3, [r4, #28]
 8000a6c:	4a28      	ldr	r2, [pc, #160]	; (8000b10 <HAL_RCCEx_PeriphCLKConfig+0xfc>)
 8000a6e:	4013      	ands	r3, r2
 8000a70:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000a72:	682a      	ldr	r2, [r5, #0]
 8000a74:	07d3      	lsls	r3, r2, #31
 8000a76:	d506      	bpl.n	8000a86 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	4922      	ldr	r1, [pc, #136]	; (8000b04 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a7c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8000a7e:	4383      	bics	r3, r0
 8000a80:	68a8      	ldr	r0, [r5, #8]
 8000a82:	4303      	orrs	r3, r0
 8000a84:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8000a86:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000a88:	0693      	lsls	r3, r2, #26
 8000a8a:	d517      	bpl.n	8000abc <HAL_RCCEx_PeriphCLKConfig+0xa8>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000a8c:	2110      	movs	r1, #16
 8000a8e:	4a1d      	ldr	r2, [pc, #116]	; (8000b04 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
 8000a90:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000a92:	438b      	bics	r3, r1
 8000a94:	68e9      	ldr	r1, [r5, #12]
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	e00f      	b.n	8000abc <HAL_RCCEx_PeriphCLKConfig+0xa8>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a9c:	6833      	ldr	r3, [r6, #0]
 8000a9e:	433b      	orrs	r3, r7
 8000aa0:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000aa2:	f7ff fbf1 	bl	8000288 <HAL_GetTick>
 8000aa6:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000aa8:	6833      	ldr	r3, [r6, #0]
 8000aaa:	423b      	tst	r3, r7
 8000aac:	d1cf      	bne.n	8000a4e <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000aae:	f7ff fbeb 	bl	8000288 <HAL_GetTick>
 8000ab2:	9b01      	ldr	r3, [sp, #4]
 8000ab4:	1ac0      	subs	r0, r0, r3
 8000ab6:	2864      	cmp	r0, #100	; 0x64
 8000ab8:	d9f6      	bls.n	8000aa8 <HAL_RCCEx_PeriphCLKConfig+0x94>
          return HAL_TIMEOUT;
 8000aba:	2003      	movs	r0, #3
}
 8000abc:	b005      	add	sp, #20
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ac0:	6869      	ldr	r1, [r5, #4]
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d0c8      	beq.n	8000a5a <HAL_RCCEx_PeriphCLKConfig+0x46>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ac8:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000aca:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000acc:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ace:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8000ad0:	025b      	lsls	r3, r3, #9
 8000ad2:	4303      	orrs	r3, r0
 8000ad4:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000ad6:	6a23      	ldr	r3, [r4, #32]
 8000ad8:	480e      	ldr	r0, [pc, #56]	; (8000b14 <HAL_RCCEx_PeriphCLKConfig+0x100>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000ada:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000adc:	4003      	ands	r3, r0
 8000ade:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8000ae0:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000ae2:	07d3      	lsls	r3, r2, #31
 8000ae4:	d5b9      	bpl.n	8000a5a <HAL_RCCEx_PeriphCLKConfig+0x46>
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fbcf 	bl	8000288 <HAL_GetTick>
 8000aea:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000aec:	2202      	movs	r2, #2
 8000aee:	6a23      	ldr	r3, [r4, #32]
 8000af0:	4213      	tst	r3, r2
 8000af2:	d1b2      	bne.n	8000a5a <HAL_RCCEx_PeriphCLKConfig+0x46>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000af4:	f7ff fbc8 	bl	8000288 <HAL_GetTick>
 8000af8:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <HAL_RCCEx_PeriphCLKConfig+0x104>)
 8000afa:	1bc0      	subs	r0, r0, r7
 8000afc:	4298      	cmp	r0, r3
 8000afe:	d9f5      	bls.n	8000aec <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8000b00:	e7db      	b.n	8000aba <HAL_RCCEx_PeriphCLKConfig+0xa6>
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	40021000 	.word	0x40021000
 8000b08:	40007000 	.word	0x40007000
 8000b0c:	fffffcff 	.word	0xfffffcff
 8000b10:	efffffff 	.word	0xefffffff
 8000b14:	fffeffff 	.word	0xfffeffff
 8000b18:	00001388 	.word	0x00001388

08000b1c <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
  uint32_t tickstart = 0U;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000b1c:	21a0      	movs	r1, #160	; 0xa0
 8000b1e:	6802      	ldr	r2, [r0, #0]
{
 8000b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000b22:	68d3      	ldr	r3, [r2, #12]
{
 8000b24:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8000b26:	438b      	bics	r3, r1
 8000b28:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8000b2a:	f7ff fbad 	bl	8000288 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
  {
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b2e:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8000b30:	0006      	movs	r6, r0
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8000b32:	2520      	movs	r5, #32
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b34:	00bf      	lsls	r7, r7, #2
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	422b      	tst	r3, r5
 8000b3c:	d001      	beq.n	8000b42 <HAL_RTC_WaitForSynchro+0x26>
    {       
      return HAL_TIMEOUT;
    } 
  }

  return HAL_OK;
 8000b3e:	2000      	movs	r0, #0
}
 8000b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b42:	f7ff fba1 	bl	8000288 <HAL_GetTick>
 8000b46:	1b80      	subs	r0, r0, r6
 8000b48:	42b8      	cmp	r0, r7
 8000b4a:	d9f4      	bls.n	8000b36 <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	e7f7      	b.n	8000b40 <HAL_RTC_WaitForSynchro+0x24>

08000b50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8000b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000b52:	2440      	movs	r4, #64	; 0x40
 8000b54:	6803      	ldr	r3, [r0, #0]
{
 8000b56:	0005      	movs	r5, r0
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4222      	tst	r2, r4
 8000b5c:	d001      	beq.n	8000b62 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      } 
    }
  }
  
  return HAL_OK;  
 8000b5e:	2000      	movs	r0, #0
}
 8000b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8000b62:	2201      	movs	r2, #1
 8000b64:	4252      	negs	r2, r2
 8000b66:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8000b68:	f7ff fb8e 	bl	8000288 <HAL_GetTick>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b6c:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8000b6e:	0006      	movs	r6, r0
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b70:	00bf      	lsls	r7, r7, #2
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8000b72:	682b      	ldr	r3, [r5, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	4223      	tst	r3, r4
 8000b78:	d1f1      	bne.n	8000b5e <RTC_EnterInitMode+0xe>
      if((HAL_GetTick()-tickstart) > RTC_TIMEOUT_VALUE)
 8000b7a:	f7ff fb85 	bl	8000288 <HAL_GetTick>
 8000b7e:	1b80      	subs	r0, r0, r6
 8000b80:	42b8      	cmp	r0, r7
 8000b82:	d9f6      	bls.n	8000b72 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8000b84:	2003      	movs	r0, #3
 8000b86:	e7eb      	b.n	8000b60 <RTC_EnterInitMode+0x10>

08000b88 <HAL_RTC_Init>:
{
 8000b88:	b570      	push	{r4, r5, r6, lr}
 8000b8a:	0004      	movs	r4, r0
     return HAL_ERROR;
 8000b8c:	2501      	movs	r5, #1
  if(hrtc == NULL)
 8000b8e:	2800      	cmp	r0, #0
 8000b90:	d018      	beq.n	8000bc4 <HAL_RTC_Init+0x3c>
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8000b92:	7f43      	ldrb	r3, [r0, #29]
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d102      	bne.n	8000ba0 <HAL_RTC_Init+0x18>
    hrtc->Lock = HAL_UNLOCKED;
 8000b9a:	7703      	strb	r3, [r0, #28]
    HAL_RTC_MspInit(hrtc);
 8000b9c:	f000 fe14 	bl	80017c8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000ba0:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000ba2:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;  
 8000ba4:	7763      	strb	r3, [r4, #29]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000ba6:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000ba8:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000baa:	625a      	str	r2, [r3, #36]	; 0x24
 8000bac:	3a77      	subs	r2, #119	; 0x77
 8000bae:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000bb0:	f7ff ffce 	bl	8000b50 <RTC_EnterInitMode>
 8000bb4:	6823      	ldr	r3, [r4, #0]
 8000bb6:	1e05      	subs	r5, r0, #0
 8000bb8:	d006      	beq.n	8000bc8 <HAL_RTC_Init+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000bba:	22ff      	movs	r2, #255	; 0xff
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000bbe:	2304      	movs	r3, #4
        return HAL_ERROR;
 8000bc0:	2501      	movs	r5, #1
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000bc2:	7763      	strb	r3, [r4, #29]
}
 8000bc4:	0028      	movs	r0, r5
 8000bc6:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000bc8:	689a      	ldr	r2, [r3, #8]
 8000bca:	4917      	ldr	r1, [pc, #92]	; (8000c28 <HAL_RTC_Init+0xa0>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000bcc:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8000bce:	400a      	ands	r2, r1
 8000bd0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8000bd2:	6862      	ldr	r2, [r4, #4]
 8000bd4:	6899      	ldr	r1, [r3, #8]
 8000bd6:	4302      	orrs	r2, r0
 8000bd8:	6960      	ldr	r0, [r4, #20]
 8000bda:	4302      	orrs	r2, r0
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8000be0:	68e2      	ldr	r2, [r4, #12]
 8000be2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8000be4:	68a2      	ldr	r2, [r4, #8]
 8000be6:	6919      	ldr	r1, [r3, #16]
 8000be8:	0412      	lsls	r2, r2, #16
 8000bea:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8000bec:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8000bee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT; 
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	438a      	bics	r2, r1
 8000bf4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8000bf6:	689b      	ldr	r3, [r3, #8]
 8000bf8:	069b      	lsls	r3, r3, #26
 8000bfa:	d406      	bmi.n	8000c0a <HAL_RTC_Init+0x82>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000bfc:	0020      	movs	r0, r4
 8000bfe:	f7ff ff8d 	bl	8000b1c <HAL_RTC_WaitForSynchro>
 8000c02:	2800      	cmp	r0, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_RTC_Init+0x82>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000c06:	6823      	ldr	r3, [r4, #0]
 8000c08:	e7d7      	b.n	8000bba <HAL_RTC_Init+0x32>
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8000c0a:	6823      	ldr	r3, [r4, #0]
 8000c0c:	4907      	ldr	r1, [pc, #28]	; (8000c2c <HAL_RTC_Init+0xa4>)
 8000c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c10:	400a      	ands	r2, r1
 8000c12:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType); 
 8000c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c16:	69a1      	ldr	r1, [r4, #24]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	641a      	str	r2, [r3, #64]	; 0x40
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8000c1c:	22ff      	movs	r2, #255	; 0xff
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8000c20:	2301      	movs	r3, #1
 8000c22:	7763      	strb	r3, [r4, #29]
    return HAL_OK;
 8000c24:	e7ce      	b.n	8000bc4 <HAL_RTC_Init+0x3c>
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	ff8fffbf 	.word	0xff8fffbf
 8000c2c:	fffbffff 	.word	0xfffbffff

08000c30 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8000c30:	2300      	movs	r3, #0
  
  while(Value >= 10U)
 8000c32:	2809      	cmp	r0, #9
 8000c34:	d803      	bhi.n	8000c3e <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Value -= 10U;
  }
  
  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8000c36:	011b      	lsls	r3, r3, #4
 8000c38:	4318      	orrs	r0, r3
 8000c3a:	b2c0      	uxtb	r0, r0
}
 8000c3c:	4770      	bx	lr
    Value -= 10U;
 8000c3e:	380a      	subs	r0, #10
    bcdhigh++;
 8000c40:	3301      	adds	r3, #1
    Value -= 10U;
 8000c42:	b2c0      	uxtb	r0, r0
 8000c44:	e7f5      	b.n	8000c32 <RTC_ByteToBcd2+0x2>
	...

08000c48 <HAL_RTC_SetTime>:
{
 8000c48:	2302      	movs	r3, #2
 8000c4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000c4c:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8000c4e:	7f01      	ldrb	r1, [r0, #28]
{
 8000c50:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8000c52:	001f      	movs	r7, r3
 8000c54:	2901      	cmp	r1, #1
 8000c56:	d032      	beq.n	8000cbe <HAL_RTC_SetTime+0x76>
 8000c58:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY;
 8000c5a:	7743      	strb	r3, [r0, #29]
 8000c5c:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hrtc);
 8000c5e:	7701      	strb	r1, [r0, #28]
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	313f      	adds	r1, #63	; 0x3f
 8000c64:	7828      	ldrb	r0, [r5, #0]
 8000c66:	786e      	ldrb	r6, [r5, #1]
 8000c68:	78af      	ldrb	r7, [r5, #2]
 8000c6a:	400b      	ands	r3, r1
  if(Format == RTC_FORMAT_BIN)
 8000c6c:	2a00      	cmp	r2, #0
 8000c6e:	d128      	bne.n	8000cc2 <HAL_RTC_SetTime+0x7a>
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d100      	bne.n	8000c76 <HAL_RTC_SetTime+0x2e>
      sTime->TimeFormat = 0x00U;
 8000c74:	70eb      	strb	r3, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8000c76:	f7ff ffdb 	bl	8000c30 <RTC_ByteToBcd2>
 8000c7a:	9001      	str	r0, [sp, #4]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8000c7c:	0030      	movs	r0, r6
 8000c7e:	f7ff ffd7 	bl	8000c30 <RTC_ByteToBcd2>
 8000c82:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8000c84:	0038      	movs	r0, r7
 8000c86:	f7ff ffd3 	bl	8000c30 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8000c8a:	78ef      	ldrb	r7, [r5, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8000c8c:	9b01      	ldr	r3, [sp, #4]
                        (((uint32_t)sTime->TimeFormat) << 16U));  
 8000c8e:	043f      	lsls	r7, r7, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8000c90:	4307      	orrs	r7, r0
 8000c92:	0418      	lsls	r0, r3, #16
 8000c94:	4307      	orrs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8000c96:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c98:	22ca      	movs	r2, #202	; 0xca
 8000c9a:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000c9c:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000c9e:	625a      	str	r2, [r3, #36]	; 0x24
 8000ca0:	3a77      	subs	r2, #119	; 0x77
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000ca4:	f7ff ff54 	bl	8000b50 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8000ca8:	433e      	orrs	r6, r7
 8000caa:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000cac:	1e07      	subs	r7, r0, #0
 8000cae:	d012      	beq.n	8000cd6 <HAL_RTC_SetTime+0x8e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8000cb0:	22ff      	movs	r2, #255	; 0xff
 8000cb2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000cb4:	2304      	movs	r3, #4
 8000cb6:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8000cb8:	2300      	movs	r3, #0
 8000cba:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8000cbc:	2701      	movs	r7, #1
}
 8000cbe:	0038      	movs	r0, r7
 8000cc0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d100      	bne.n	8000cc8 <HAL_RTC_SetTime+0x80>
      sTime->TimeFormat = 0x00U;
 8000cc6:	70eb      	strb	r3, [r5, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8000cc8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8000cca:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8000ccc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8000cce:	4337      	orrs	r7, r6
              ((uint32_t)(sTime->TimeFormat) << 16U));   
 8000cd0:	78ee      	ldrb	r6, [r5, #3]
 8000cd2:	0436      	lsls	r6, r6, #16
 8000cd4:	e7e0      	b.n	8000c98 <HAL_RTC_SetTime+0x50>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <HAL_RTC_SetTime+0xe0>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8000cd8:	4914      	ldr	r1, [pc, #80]	; (8000d2c <HAL_RTC_SetTime+0xe4>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8000cda:	4006      	ands	r6, r0
 8000cdc:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8000cde:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8000ce0:	6928      	ldr	r0, [r5, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8000ce2:	400a      	ands	r2, r1
 8000ce4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8000ce6:	68ea      	ldr	r2, [r5, #12]
 8000ce8:	6899      	ldr	r1, [r3, #8]
 8000cea:	4302      	orrs	r2, r0
 8000cec:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8000cee:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8000cf0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	438a      	bics	r2, r1
 8000cf6:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8000cf8:	689b      	ldr	r3, [r3, #8]
 8000cfa:	069b      	lsls	r3, r3, #26
 8000cfc:	d40b      	bmi.n	8000d16 <HAL_RTC_SetTime+0xce>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000cfe:	0020      	movs	r0, r4
 8000d00:	f7ff ff0c 	bl	8000b1c <HAL_RTC_WaitForSynchro>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	d006      	beq.n	8000d16 <HAL_RTC_SetTime+0xce>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8000d08:	22ff      	movs	r2, #255	; 0xff
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000d0e:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8000d10:	7727      	strb	r7, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000d12:	7763      	strb	r3, [r4, #29]
 8000d14:	e7d2      	b.n	8000cbc <HAL_RTC_SetTime+0x74>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8000d16:	22ff      	movs	r2, #255	; 0xff
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	625a      	str	r2, [r3, #36]	; 0x24
   hrtc->State = HAL_RTC_STATE_READY;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	7763      	strb	r3, [r4, #29]
   __HAL_UNLOCK(hrtc); 
 8000d20:	2300      	movs	r3, #0
 8000d22:	7723      	strb	r3, [r4, #28]
   return HAL_OK;
 8000d24:	e7cb      	b.n	8000cbe <HAL_RTC_SetTime+0x76>
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	007f7f7f 	.word	0x007f7f7f
 8000d2c:	fffbffff 	.word	0xfffbffff

08000d30 <HAL_RTC_SetDate>:
{
 8000d30:	2302      	movs	r3, #2
 8000d32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d34:	000d      	movs	r5, r1
 __HAL_LOCK(hrtc);
 8000d36:	7f01      	ldrb	r1, [r0, #28]
{
 8000d38:	0004      	movs	r4, r0
 __HAL_LOCK(hrtc);
 8000d3a:	001e      	movs	r6, r3
 8000d3c:	2901      	cmp	r1, #1
 8000d3e:	d031      	beq.n	8000da4 <HAL_RTC_SetDate+0x74>
 8000d40:	2101      	movs	r1, #1
  hrtc->State = HAL_RTC_STATE_BUSY; 
 8000d42:	7743      	strb	r3, [r0, #29]
 __HAL_LOCK(hrtc);
 8000d44:	7701      	strb	r1, [r0, #28]
 8000d46:	786b      	ldrb	r3, [r5, #1]
 8000d48:	78e8      	ldrb	r0, [r5, #3]
 8000d4a:	78af      	ldrb	r7, [r5, #2]
 8000d4c:	782e      	ldrb	r6, [r5, #0]
  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8000d4e:	2a00      	cmp	r2, #0
 8000d50:	d148      	bne.n	8000de4 <HAL_RTC_SetDate+0xb4>
 8000d52:	3210      	adds	r2, #16
 8000d54:	4213      	tst	r3, r2
 8000d56:	d002      	beq.n	8000d5e <HAL_RTC_SetDate+0x2e>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8000d58:	4393      	bics	r3, r2
 8000d5a:	330a      	adds	r3, #10
 8000d5c:	706b      	strb	r3, [r5, #1]
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8000d5e:	f7ff ff67 	bl	8000c30 <RTC_ByteToBcd2>
 8000d62:	9001      	str	r0, [sp, #4]
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8000d64:	7868      	ldrb	r0, [r5, #1]
 8000d66:	f7ff ff63 	bl	8000c30 <RTC_ByteToBcd2>
 8000d6a:	0005      	movs	r5, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8000d6c:	0038      	movs	r0, r7
 8000d6e:	f7ff ff5f 	bl	8000c30 <RTC_ByteToBcd2>
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8000d72:	9b01      	ldr	r3, [sp, #4]
                 ((uint32_t)sDate->WeekDay << 13U));   
 8000d74:	0376      	lsls	r6, r6, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8000d76:	4330      	orrs	r0, r6
 8000d78:	041e      	lsls	r6, r3, #16
 8000d7a:	4306      	orrs	r6, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8000d7c:	022d      	lsls	r5, r5, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8000d7e:	4335      	orrs	r5, r6
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000d80:	22ca      	movs	r2, #202	; 0xca
 8000d82:	6823      	ldr	r3, [r4, #0]
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000d84:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8000d86:	625a      	str	r2, [r3, #36]	; 0x24
 8000d88:	3a77      	subs	r2, #119	; 0x77
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8000d8c:	f7ff fee0 	bl	8000b50 <RTC_EnterInitMode>
 8000d90:	6823      	ldr	r3, [r4, #0]
 8000d92:	1e06      	subs	r6, r0, #0
 8000d94:	d008      	beq.n	8000da8 <HAL_RTC_SetDate+0x78>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc); 
 8000d96:	22ff      	movs	r2, #255	; 0xff
 8000d98:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8000d9e:	2300      	movs	r3, #0
 8000da0:	7723      	strb	r3, [r4, #28]
        return HAL_ERROR;
 8000da2:	2601      	movs	r6, #1
}
 8000da4:	0030      	movs	r0, r6
 8000da6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8000da8:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8000daa:	4f12      	ldr	r7, [pc, #72]	; (8000df4 <HAL_RTC_SetDate+0xc4>)
 8000dac:	403d      	ands	r5, r7
 8000dae:	605d      	str	r5, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8000db0:	68da      	ldr	r2, [r3, #12]
 8000db2:	438a      	bics	r2, r1
 8000db4:	60da      	str	r2, [r3, #12]
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	069b      	lsls	r3, r3, #26
 8000dba:	d40b      	bmi.n	8000dd4 <HAL_RTC_SetDate+0xa4>
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8000dbc:	0020      	movs	r0, r4
 8000dbe:	f7ff fead 	bl	8000b1c <HAL_RTC_WaitForSynchro>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d006      	beq.n	8000dd4 <HAL_RTC_SetDate+0xa4>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8000dc6:	22ff      	movs	r2, #255	; 0xff
 8000dc8:	6823      	ldr	r3, [r4, #0]
 8000dca:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000dcc:	2304      	movs	r3, #4
        __HAL_UNLOCK(hrtc);
 8000dce:	7726      	strb	r6, [r4, #28]
        hrtc->State = HAL_RTC_STATE_ERROR;
 8000dd0:	7763      	strb	r3, [r4, #29]
 8000dd2:	e7e6      	b.n	8000da2 <HAL_RTC_SetDate+0x72>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);  
 8000dd4:	22ff      	movs	r2, #255	; 0xff
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	7763      	strb	r3, [r4, #29]
    __HAL_UNLOCK(hrtc);
 8000dde:	2300      	movs	r3, #0
 8000de0:	7723      	strb	r3, [r4, #28]
    return HAL_OK;    
 8000de2:	e7df      	b.n	8000da4 <HAL_RTC_SetDate+0x74>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8000de4:	0400      	lsls	r0, r0, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8000de6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8000de8:	4303      	orrs	r3, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8000dea:	431f      	orrs	r7, r3
                  (((uint32_t)sDate->WeekDay) << 13U));  
 8000dec:	0375      	lsls	r5, r6, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8000dee:	433d      	orrs	r5, r7
 8000df0:	e7c6      	b.n	8000d80 <HAL_RTC_SetDate+0x50>
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	00ffff3f 	.word	0x00ffff3f

08000df8 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U;
 8000df8:	230a      	movs	r3, #10
 8000dfa:	0902      	lsrs	r2, r0, #4
 8000dfc:	4353      	muls	r3, r2
  return (tmp + (Value & (uint8_t)0x0FU));
 8000dfe:	220f      	movs	r2, #15
 8000e00:	4010      	ands	r0, r2
 8000e02:	1818      	adds	r0, r3, r0
 8000e04:	b2c0      	uxtb	r0, r0
}
 8000e06:	4770      	bx	lr

08000e08 <HAL_RTC_GetTime>:
{
 8000e08:	b570      	push	{r4, r5, r6, lr}
 8000e0a:	000c      	movs	r4, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8000e0c:	257f      	movs	r5, #127	; 0x7f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8000e0e:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8000e10:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8000e12:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8000e14:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8000e16:	690b      	ldr	r3, [r1, #16]
 8000e18:	045b      	lsls	r3, r3, #17
 8000e1a:	0c5b      	lsrs	r3, r3, #17
 8000e1c:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK); 
 8000e1e:	680b      	ldr	r3, [r1, #0]
 8000e20:	490d      	ldr	r1, [pc, #52]	; (8000e58 <HAL_RTC_GetTime+0x50>)
 8000e22:	400b      	ands	r3, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8000e24:	0a1e      	lsrs	r6, r3, #8
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8000e26:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8000e28:	402e      	ands	r6, r5
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8000e2a:	401d      	ands	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8000e2c:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8000e2e:	4008      	ands	r0, r1
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8000e30:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8000e32:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8U);
 8000e34:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8000e36:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U); 
 8000e38:	70e1      	strb	r1, [r4, #3]
  if(Format == RTC_FORMAT_BIN)
 8000e3a:	2a00      	cmp	r2, #0
 8000e3c:	d10a      	bne.n	8000e54 <HAL_RTC_GetTime+0x4c>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8000e3e:	f7ff ffdb 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e42:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8000e44:	0030      	movs	r0, r6
 8000e46:	f7ff ffd7 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e4a:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);  
 8000e4c:	0028      	movs	r0, r5
 8000e4e:	f7ff ffd3 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e52:	70a0      	strb	r0, [r4, #2]
}
 8000e54:	2000      	movs	r0, #0
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	007f7f7f 	.word	0x007f7f7f

08000e5c <HAL_RTC_GetDate>:
{
 8000e5c:	b570      	push	{r4, r5, r6, lr}
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8000e5e:	253f      	movs	r5, #63	; 0x3f
{
 8000e60:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK); 
 8000e62:	6803      	ldr	r3, [r0, #0]
 8000e64:	490d      	ldr	r1, [pc, #52]	; (8000e9c <HAL_RTC_GetDate+0x40>)
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8000e6a:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8000e6c:	04de      	lsls	r6, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8000e6e:	401d      	ands	r5, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8000e70:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8000e72:	0ef6      	lsrs	r6, r6, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8000e74:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8000e76:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8000e78:	7066      	strb	r6, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8000e7a:	70a5      	strb	r5, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U); 
 8000e7c:	7023      	strb	r3, [r4, #0]
  if(Format == RTC_FORMAT_BIN)
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	d10a      	bne.n	8000e98 <HAL_RTC_GetDate+0x3c>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8000e82:	f7ff ffb9 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e86:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8000e88:	0030      	movs	r0, r6
 8000e8a:	f7ff ffb5 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e8e:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);  
 8000e90:	0028      	movs	r0, r5
 8000e92:	f7ff ffb1 	bl	8000df8 <RTC_Bcd2ToByte>
 8000e96:	70a0      	strb	r0, [r4, #2]
}
 8000e98:	2000      	movs	r0, #0
 8000e9a:	bd70      	pop	{r4, r5, r6, pc}
 8000e9c:	00ffff3f 	.word	0x00ffff3f

08000ea0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	6a03      	ldr	r3, [r0, #32]
{
 8000ea4:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000ea6:	4393      	bics	r3, r2
 8000ea8:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000eaa:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000eac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000eae:	6985      	ldr	r5, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000eb0:	3272      	adds	r2, #114	; 0x72
 8000eb2:	4395      	bics	r5, r2
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000eb4:	680a      	ldr	r2, [r1, #0]
 8000eb6:	4315      	orrs	r5, r2

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8000eb8:	2202      	movs	r2, #2
 8000eba:	4393      	bics	r3, r2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000ebc:	688a      	ldr	r2, [r1, #8]
 8000ebe:	4313      	orrs	r3, r2

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000ec0:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <TIM_OC1_SetConfig+0x68>)
 8000ec2:	4290      	cmp	r0, r2
 8000ec4:	d005      	beq.n	8000ed2 <TIM_OC1_SetConfig+0x32>
 8000ec6:	4e11      	ldr	r6, [pc, #68]	; (8000f0c <TIM_OC1_SetConfig+0x6c>)
 8000ec8:	42b0      	cmp	r0, r6
 8000eca:	d002      	beq.n	8000ed2 <TIM_OC1_SetConfig+0x32>
 8000ecc:	4e10      	ldr	r6, [pc, #64]	; (8000f10 <TIM_OC1_SetConfig+0x70>)
 8000ece:	42b0      	cmp	r0, r6
 8000ed0:	d113      	bne.n	8000efa <TIM_OC1_SetConfig+0x5a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8000ed2:	2608      	movs	r6, #8
 8000ed4:	43b3      	bics	r3, r6
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000ed6:	68ce      	ldr	r6, [r1, #12]
 8000ed8:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8000eda:	2604      	movs	r6, #4
 8000edc:	43b3      	bics	r3, r6
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000ede:	4290      	cmp	r0, r2
 8000ee0:	d005      	beq.n	8000eee <TIM_OC1_SetConfig+0x4e>
 8000ee2:	4a0a      	ldr	r2, [pc, #40]	; (8000f0c <TIM_OC1_SetConfig+0x6c>)
 8000ee4:	4290      	cmp	r0, r2
 8000ee6:	d002      	beq.n	8000eee <TIM_OC1_SetConfig+0x4e>
 8000ee8:	4a09      	ldr	r2, [pc, #36]	; (8000f10 <TIM_OC1_SetConfig+0x70>)
 8000eea:	4290      	cmp	r0, r2
 8000eec:	d105      	bne.n	8000efa <TIM_OC1_SetConfig+0x5a>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000eee:	4a09      	ldr	r2, [pc, #36]	; (8000f14 <TIM_OC1_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ef0:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000ef2:	4022      	ands	r2, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8000ef4:	694c      	ldr	r4, [r1, #20]
 8000ef6:	4334      	orrs	r4, r6
 8000ef8:	4314      	orrs	r4, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000efa:	684a      	ldr	r2, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8000efc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000efe:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8000f00:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f02:	6203      	str	r3, [r0, #32]
}
 8000f04:	bd70      	pop	{r4, r5, r6, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40012c00 	.word	0x40012c00
 8000f0c:	40014400 	.word	0x40014400
 8000f10:	40014800 	.word	0x40014800
 8000f14:	fffffcff 	.word	0xfffffcff

08000f18 <TIM_OC3_SetConfig>:
  * @param  TIMx  to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8000f18:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f1a:	2573      	movs	r5, #115	; 0x73
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f1c:	6a03      	ldr	r3, [r0, #32]
 8000f1e:	4a16      	ldr	r2, [pc, #88]	; (8000f78 <TIM_OC3_SetConfig+0x60>)
 8000f20:	4013      	ands	r3, r2
 8000f22:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8000f24:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8000f26:	6842      	ldr	r2, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000f28:	69c4      	ldr	r4, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8000f2a:	43ac      	bics	r4, r5
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f2c:	680d      	ldr	r5, [r1, #0]
 8000f2e:	432c      	orrs	r4, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8000f30:	4d12      	ldr	r5, [pc, #72]	; (8000f7c <TIM_OC3_SetConfig+0x64>)
 8000f32:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f34:	688d      	ldr	r5, [r1, #8]
 8000f36:	022d      	lsls	r5, r5, #8
 8000f38:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f3a:	4d11      	ldr	r5, [pc, #68]	; (8000f80 <TIM_OC3_SetConfig+0x68>)
 8000f3c:	42a8      	cmp	r0, r5
 8000f3e:	d10e      	bne.n	8000f5e <TIM_OC3_SetConfig+0x46>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8000f40:	4d10      	ldr	r5, [pc, #64]	; (8000f84 <TIM_OC3_SetConfig+0x6c>)
 8000f42:	401d      	ands	r5, r3
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f44:	68cb      	ldr	r3, [r1, #12]
 8000f46:	021b      	lsls	r3, r3, #8
 8000f48:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000f4a:	4d0f      	ldr	r5, [pc, #60]	; (8000f88 <TIM_OC3_SetConfig+0x70>)
 8000f4c:	402b      	ands	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f4e:	4d0f      	ldr	r5, [pc, #60]	; (8000f8c <TIM_OC3_SetConfig+0x74>)
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f50:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f52:	4015      	ands	r5, r2
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f54:	698a      	ldr	r2, [r1, #24]
 8000f56:	4332      	orrs	r2, r6
 8000f58:	0112      	lsls	r2, r2, #4
 8000f5a:	432a      	orrs	r2, r5
 8000f5c:	e005      	b.n	8000f6a <TIM_OC3_SetConfig+0x52>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f5e:	4d0c      	ldr	r5, [pc, #48]	; (8000f90 <TIM_OC3_SetConfig+0x78>)
 8000f60:	42a8      	cmp	r0, r5
 8000f62:	d0f4      	beq.n	8000f4e <TIM_OC3_SetConfig+0x36>
 8000f64:	4d0b      	ldr	r5, [pc, #44]	; (8000f94 <TIM_OC3_SetConfig+0x7c>)
 8000f66:	42a8      	cmp	r0, r5
 8000f68:	d0f1      	beq.n	8000f4e <TIM_OC3_SetConfig+0x36>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f6a:	6042      	str	r2, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000f6c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000f6e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000f70:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000f72:	6203      	str	r3, [r0, #32]
}
 8000f74:	bd70      	pop	{r4, r5, r6, pc}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	fffffeff 	.word	0xfffffeff
 8000f7c:	fffffdff 	.word	0xfffffdff
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	fffff7ff 	.word	0xfffff7ff
 8000f88:	fffffbff 	.word	0xfffffbff
 8000f8c:	ffffcfff 	.word	0xffffcfff
 8000f90:	40014400 	.word	0x40014400
 8000f94:	40014800 	.word	0x40014800

08000f98 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f98:	6a03      	ldr	r3, [r0, #32]
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <TIM_OC4_SetConfig+0x4c>)
{
 8000f9c:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fa2:	6a02      	ldr	r2, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000fa4:	4c10      	ldr	r4, [pc, #64]	; (8000fe8 <TIM_OC4_SetConfig+0x50>)
  tmpcr2 =  TIMx->CR2;
 8000fa6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR2;
 8000fa8:	69c5      	ldr	r5, [r0, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000faa:	4025      	ands	r5, r4

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fac:	680c      	ldr	r4, [r1, #0]
 8000fae:	0224      	lsls	r4, r4, #8
 8000fb0:	4325      	orrs	r5, r4

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8000fb2:	4c0e      	ldr	r4, [pc, #56]	; (8000fec <TIM_OC4_SetConfig+0x54>)
 8000fb4:	4022      	ands	r2, r4
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000fb6:	688c      	ldr	r4, [r1, #8]
 8000fb8:	0324      	lsls	r4, r4, #12
 8000fba:	4322      	orrs	r2, r4

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fbc:	4c0c      	ldr	r4, [pc, #48]	; (8000ff0 <TIM_OC4_SetConfig+0x58>)
 8000fbe:	42a0      	cmp	r0, r4
 8000fc0:	d005      	beq.n	8000fce <TIM_OC4_SetConfig+0x36>
 8000fc2:	4c0c      	ldr	r4, [pc, #48]	; (8000ff4 <TIM_OC4_SetConfig+0x5c>)
 8000fc4:	42a0      	cmp	r0, r4
 8000fc6:	d002      	beq.n	8000fce <TIM_OC4_SetConfig+0x36>
 8000fc8:	4c0b      	ldr	r4, [pc, #44]	; (8000ff8 <TIM_OC4_SetConfig+0x60>)
 8000fca:	42a0      	cmp	r0, r4
 8000fcc:	d104      	bne.n	8000fd8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000fce:	4c0b      	ldr	r4, [pc, #44]	; (8000ffc <TIM_OC4_SetConfig+0x64>)
 8000fd0:	4023      	ands	r3, r4
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000fd2:	694c      	ldr	r4, [r1, #20]
 8000fd4:	01a4      	lsls	r4, r4, #6
 8000fd6:	4323      	orrs	r3, r4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000fd8:	6043      	str	r3, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8000fda:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000fdc:	61c5      	str	r5, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8000fde:	6403      	str	r3, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000fe0:	6202      	str	r2, [r0, #32]
}
 8000fe2:	bd30      	pop	{r4, r5, pc}
 8000fe4:	ffffefff 	.word	0xffffefff
 8000fe8:	ffff8cff 	.word	0xffff8cff
 8000fec:	ffffdfff 	.word	0xffffdfff
 8000ff0:	40012c00 	.word	0x40012c00
 8000ff4:	40014400 	.word	0x40014400
 8000ff8:	40014800 	.word	0x40014800
 8000ffc:	ffffbfff 	.word	0xffffbfff

08001000 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <TIM_Base_SetConfig+0x68>)
{
 8001002:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8001004:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001006:	4290      	cmp	r0, r2
 8001008:	d002      	beq.n	8001010 <TIM_Base_SetConfig+0x10>
 800100a:	4c18      	ldr	r4, [pc, #96]	; (800106c <TIM_Base_SetConfig+0x6c>)
 800100c:	42a0      	cmp	r0, r4
 800100e:	d108      	bne.n	8001022 <TIM_Base_SetConfig+0x22>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001010:	2470      	movs	r4, #112	; 0x70
 8001012:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8001014:	684c      	ldr	r4, [r1, #4]
 8001016:	4323      	orrs	r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001018:	4290      	cmp	r0, r2
 800101a:	d00b      	beq.n	8001034 <TIM_Base_SetConfig+0x34>
 800101c:	4c13      	ldr	r4, [pc, #76]	; (800106c <TIM_Base_SetConfig+0x6c>)
 800101e:	42a0      	cmp	r0, r4
 8001020:	d008      	beq.n	8001034 <TIM_Base_SetConfig+0x34>
 8001022:	4c13      	ldr	r4, [pc, #76]	; (8001070 <TIM_Base_SetConfig+0x70>)
 8001024:	42a0      	cmp	r0, r4
 8001026:	d005      	beq.n	8001034 <TIM_Base_SetConfig+0x34>
 8001028:	4c12      	ldr	r4, [pc, #72]	; (8001074 <TIM_Base_SetConfig+0x74>)
 800102a:	42a0      	cmp	r0, r4
 800102c:	d002      	beq.n	8001034 <TIM_Base_SetConfig+0x34>
 800102e:	4c12      	ldr	r4, [pc, #72]	; (8001078 <TIM_Base_SetConfig+0x78>)
 8001030:	42a0      	cmp	r0, r4
 8001032:	d103      	bne.n	800103c <TIM_Base_SetConfig+0x3c>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001034:	4c11      	ldr	r4, [pc, #68]	; (800107c <TIM_Base_SetConfig+0x7c>)
 8001036:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001038:	68cc      	ldr	r4, [r1, #12]
 800103a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800103c:	2480      	movs	r4, #128	; 0x80
 800103e:	43a3      	bics	r3, r4
 8001040:	694c      	ldr	r4, [r1, #20]
 8001042:	4323      	orrs	r3, r4
  TIMx->CR1 = tmpcr1;
 8001044:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001046:	688b      	ldr	r3, [r1, #8]
 8001048:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800104a:	680b      	ldr	r3, [r1, #0]
 800104c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800104e:	4290      	cmp	r0, r2
 8001050:	d005      	beq.n	800105e <TIM_Base_SetConfig+0x5e>
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <TIM_Base_SetConfig+0x74>)
 8001054:	4298      	cmp	r0, r3
 8001056:	d002      	beq.n	800105e <TIM_Base_SetConfig+0x5e>
 8001058:	4b07      	ldr	r3, [pc, #28]	; (8001078 <TIM_Base_SetConfig+0x78>)
 800105a:	4298      	cmp	r0, r3
 800105c:	d101      	bne.n	8001062 <TIM_Base_SetConfig+0x62>
    TIMx->RCR = Structure->RepetitionCounter;
 800105e:	690b      	ldr	r3, [r1, #16]
 8001060:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001062:	2301      	movs	r3, #1
 8001064:	6143      	str	r3, [r0, #20]
}
 8001066:	bd10      	pop	{r4, pc}
 8001068:	40012c00 	.word	0x40012c00
 800106c:	40000400 	.word	0x40000400
 8001070:	40002000 	.word	0x40002000
 8001074:	40014400 	.word	0x40014400
 8001078:	40014800 	.word	0x40014800
 800107c:	fffffcff 	.word	0xfffffcff

08001080 <HAL_TIM_PWM_Init>:
{
 8001080:	b570      	push	{r4, r5, r6, lr}
 8001082:	0004      	movs	r4, r0
    return HAL_ERROR;
 8001084:	2001      	movs	r0, #1
  if(htim == NULL)
 8001086:	2c00      	cmp	r4, #0
 8001088:	d014      	beq.n	80010b4 <HAL_TIM_PWM_Init+0x34>
  if(htim->State == HAL_TIM_STATE_RESET)
 800108a:	0025      	movs	r5, r4
 800108c:	353d      	adds	r5, #61	; 0x3d
 800108e:	782b      	ldrb	r3, [r5, #0]
 8001090:	b2db      	uxtb	r3, r3
 8001092:	2b00      	cmp	r3, #0
 8001094:	d105      	bne.n	80010a2 <HAL_TIM_PWM_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8001096:	0022      	movs	r2, r4
 8001098:	323c      	adds	r2, #60	; 0x3c
 800109a:	7013      	strb	r3, [r2, #0]
    HAL_TIM_PWM_MspInit(htim);
 800109c:	0020      	movs	r0, r4
 800109e:	f000 fba3 	bl	80017e8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80010a2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010a4:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80010a6:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80010a8:	1d21      	adds	r1, r4, #4
 80010aa:	f7ff ffa9 	bl	8001000 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80010ae:	2301      	movs	r3, #1
  return HAL_OK;
 80010b0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80010b2:	702b      	strb	r3, [r5, #0]
}
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
	...

080010b8 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010b8:	2210      	movs	r2, #16
 80010ba:	6a03      	ldr	r3, [r0, #32]
{
 80010bc:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80010be:	4393      	bics	r3, r2
 80010c0:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 80010c2:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80010c4:	4d15      	ldr	r5, [pc, #84]	; (800111c <TIM_OC2_SetConfig+0x64>)
  tmpcr2 =  TIMx->CR2;
 80010c6:	6843      	ldr	r3, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80010c8:	6984      	ldr	r4, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80010ca:	402c      	ands	r4, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80010cc:	680d      	ldr	r5, [r1, #0]
 80010ce:	022d      	lsls	r5, r5, #8
 80010d0:	432c      	orrs	r4, r5
  tmpccer &= ~TIM_CCER_CC2P;
 80010d2:	2520      	movs	r5, #32
 80010d4:	43aa      	bics	r2, r5
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80010d6:	688d      	ldr	r5, [r1, #8]
 80010d8:	012d      	lsls	r5, r5, #4
 80010da:	432a      	orrs	r2, r5
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80010dc:	4d10      	ldr	r5, [pc, #64]	; (8001120 <TIM_OC2_SetConfig+0x68>)
 80010de:	42a8      	cmp	r0, r5
 80010e0:	d10f      	bne.n	8001102 <TIM_OC2_SetConfig+0x4a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80010e2:	2580      	movs	r5, #128	; 0x80
 80010e4:	43aa      	bics	r2, r5
 80010e6:	0015      	movs	r5, r2
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80010e8:	68ca      	ldr	r2, [r1, #12]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	432a      	orrs	r2, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 80010ee:	2540      	movs	r5, #64	; 0x40
 80010f0:	43aa      	bics	r2, r5
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010f2:	4d0c      	ldr	r5, [pc, #48]	; (8001124 <TIM_OC2_SetConfig+0x6c>)
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010f4:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80010f6:	401d      	ands	r5, r3
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80010f8:	698b      	ldr	r3, [r1, #24]
 80010fa:	4333      	orrs	r3, r6
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	432b      	orrs	r3, r5
 8001100:	e005      	b.n	800110e <TIM_OC2_SetConfig+0x56>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001102:	4d09      	ldr	r5, [pc, #36]	; (8001128 <TIM_OC2_SetConfig+0x70>)
 8001104:	42a8      	cmp	r0, r5
 8001106:	d0f4      	beq.n	80010f2 <TIM_OC2_SetConfig+0x3a>
 8001108:	4d08      	ldr	r5, [pc, #32]	; (800112c <TIM_OC2_SetConfig+0x74>)
 800110a:	42a8      	cmp	r0, r5
 800110c:	d0f1      	beq.n	80010f2 <TIM_OC2_SetConfig+0x3a>
  TIMx->CR2 = tmpcr2;
 800110e:	6043      	str	r3, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 8001110:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001112:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8001114:	6383      	str	r3, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8001116:	6202      	str	r2, [r0, #32]
}
 8001118:	bd70      	pop	{r4, r5, r6, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	ffff8cff 	.word	0xffff8cff
 8001120:	40012c00 	.word	0x40012c00
 8001124:	fffff3ff 	.word	0xfffff3ff
 8001128:	40014400 	.word	0x40014400
 800112c:	40014800 	.word	0x40014800

08001130 <HAL_TIM_PWM_ConfigChannel>:
{
 8001130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8001132:	0006      	movs	r6, r0
 8001134:	2302      	movs	r3, #2
 8001136:	363c      	adds	r6, #60	; 0x3c
{
 8001138:	000d      	movs	r5, r1
  __HAL_LOCK(htim);
 800113a:	7831      	ldrb	r1, [r6, #0]
{
 800113c:	0004      	movs	r4, r0
  __HAL_LOCK(htim);
 800113e:	0018      	movs	r0, r3
 8001140:	2901      	cmp	r1, #1
 8001142:	d025      	beq.n	8001190 <HAL_TIM_PWM_ConfigChannel+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 8001144:	0027      	movs	r7, r4
  __HAL_LOCK(htim);
 8001146:	2101      	movs	r1, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001148:	373d      	adds	r7, #61	; 0x3d
  __HAL_LOCK(htim);
 800114a:	7031      	strb	r1, [r6, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800114c:	703b      	strb	r3, [r7, #0]
  switch (Channel)
 800114e:	2a0c      	cmp	r2, #12
 8001150:	d81a      	bhi.n	8001188 <HAL_TIM_PWM_ConfigChannel+0x58>
 8001152:	0010      	movs	r0, r2
 8001154:	f7fe ffd8 	bl	8000108 <__gnu_thumb1_case_uqi>
 8001158:	18181807 	.word	0x18181807
 800115c:	1818181d 	.word	0x1818181d
 8001160:	1818182f 	.word	0x1818182f
 8001164:	41          	.byte	0x41
 8001165:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001166:	0029      	movs	r1, r5
 8001168:	6820      	ldr	r0, [r4, #0]
 800116a:	f7ff fe99 	bl	8000ea0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800116e:	2208      	movs	r2, #8
 8001170:	6823      	ldr	r3, [r4, #0]
 8001172:	6999      	ldr	r1, [r3, #24]
 8001174:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001176:	2104      	movs	r1, #4
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001178:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	438a      	bics	r2, r1
 800117e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001184:	430a      	orrs	r2, r1
 8001186:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8001188:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800118a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800118c:	703b      	strb	r3, [r7, #0]
  __HAL_UNLOCK(htim);
 800118e:	7030      	strb	r0, [r6, #0]
}
 8001190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001192:	0029      	movs	r1, r5
 8001194:	6820      	ldr	r0, [r4, #0]
 8001196:	f7ff ff8f 	bl	80010b8 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800119a:	2280      	movs	r2, #128	; 0x80
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	0112      	lsls	r2, r2, #4
 80011a0:	6999      	ldr	r1, [r3, #24]
 80011a2:	430a      	orrs	r2, r1
 80011a4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80011a6:	699a      	ldr	r2, [r3, #24]
 80011a8:	4915      	ldr	r1, [pc, #84]	; (8001200 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80011aa:	400a      	ands	r2, r1
 80011ac:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80011ae:	692a      	ldr	r2, [r5, #16]
 80011b0:	6999      	ldr	r1, [r3, #24]
 80011b2:	0212      	lsls	r2, r2, #8
 80011b4:	e7e6      	b.n	8001184 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80011b6:	0029      	movs	r1, r5
 80011b8:	6820      	ldr	r0, [r4, #0]
 80011ba:	f7ff fead 	bl	8000f18 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011be:	2208      	movs	r2, #8
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	69d9      	ldr	r1, [r3, #28]
 80011c4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80011c6:	2104      	movs	r1, #4
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80011c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80011ca:	69da      	ldr	r2, [r3, #28]
 80011cc:	438a      	bics	r2, r1
 80011ce:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80011d0:	69da      	ldr	r2, [r3, #28]
 80011d2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011d4:	430a      	orrs	r2, r1
 80011d6:	61da      	str	r2, [r3, #28]
    break;
 80011d8:	e7d6      	b.n	8001188 <HAL_TIM_PWM_ConfigChannel+0x58>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80011da:	0029      	movs	r1, r5
 80011dc:	6820      	ldr	r0, [r4, #0]
 80011de:	f7ff fedb 	bl	8000f98 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80011e2:	2280      	movs	r2, #128	; 0x80
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	0112      	lsls	r2, r2, #4
 80011e8:	69d9      	ldr	r1, [r3, #28]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80011ee:	69da      	ldr	r2, [r3, #28]
 80011f0:	4903      	ldr	r1, [pc, #12]	; (8001200 <HAL_TIM_PWM_ConfigChannel+0xd0>)
 80011f2:	400a      	ands	r2, r1
 80011f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80011f6:	692a      	ldr	r2, [r5, #16]
 80011f8:	69d9      	ldr	r1, [r3, #28]
 80011fa:	0212      	lsls	r2, r2, #8
 80011fc:	e7ea      	b.n	80011d4 <HAL_TIM_PWM_ConfigChannel+0xa4>
 80011fe:	46c0      	nop			; (mov r8, r8)
 8001200:	fffffbff 	.word	0xfffffbff

08001204 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8001204:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 8001206:	2401      	movs	r4, #1
 8001208:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800120a:	408a      	lsls	r2, r1
  TIMx->CCER &= ~tmp;
 800120c:	6a03      	ldr	r3, [r0, #32]
 800120e:	43a3      	bics	r3, r4
 8001210:	6203      	str	r3, [r0, #32]
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001212:	6a03      	ldr	r3, [r0, #32]
 8001214:	431a      	orrs	r2, r3
 8001216:	6202      	str	r2, [r0, #32]
}
 8001218:	bd10      	pop	{r4, pc}
	...

0800121c <HAL_TIM_PWM_Start>:
{
 800121c:	b510      	push	{r4, lr}
 800121e:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001220:	2201      	movs	r2, #1
 8001222:	6800      	ldr	r0, [r0, #0]
 8001224:	f7ff ffee 	bl	8001204 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	4a0a      	ldr	r2, [pc, #40]	; (8001254 <HAL_TIM_PWM_Start+0x38>)
 800122c:	4293      	cmp	r3, r2
 800122e:	d005      	beq.n	800123c <HAL_TIM_PWM_Start+0x20>
 8001230:	4a09      	ldr	r2, [pc, #36]	; (8001258 <HAL_TIM_PWM_Start+0x3c>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d002      	beq.n	800123c <HAL_TIM_PWM_Start+0x20>
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <HAL_TIM_PWM_Start+0x40>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d104      	bne.n	8001246 <HAL_TIM_PWM_Start+0x2a>
    __HAL_TIM_MOE_ENABLE(htim);
 800123c:	2280      	movs	r2, #128	; 0x80
 800123e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001240:	0212      	lsls	r2, r2, #8
 8001242:	430a      	orrs	r2, r1
 8001244:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001246:	2201      	movs	r2, #1
 8001248:	6819      	ldr	r1, [r3, #0]
}
 800124a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE(htim);
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
}
 8001250:	bd10      	pop	{r4, pc}
 8001252:	46c0      	nop			; (mov r8, r8)
 8001254:	40012c00 	.word	0x40012c00
 8001258:	40014400 	.word	0x40014400
 800125c:	40014800 	.word	0x40014800

08001260 <HAL_TIM_PWM_Stop>:
{
 8001260:	b510      	push	{r4, lr}
 8001262:	0004      	movs	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001264:	2200      	movs	r2, #0
 8001266:	6800      	ldr	r0, [r0, #0]
 8001268:	f7ff ffcc 	bl	8001204 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <HAL_TIM_PWM_Stop+0x58>)
 8001270:	4912      	ldr	r1, [pc, #72]	; (80012bc <HAL_TIM_PWM_Stop+0x5c>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d005      	beq.n	8001282 <HAL_TIM_PWM_Stop+0x22>
 8001276:	4a12      	ldr	r2, [pc, #72]	; (80012c0 <HAL_TIM_PWM_Stop+0x60>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d002      	beq.n	8001282 <HAL_TIM_PWM_Stop+0x22>
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <HAL_TIM_PWM_Stop+0x64>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10a      	bne.n	8001298 <HAL_TIM_PWM_Stop+0x38>
    __HAL_TIM_MOE_DISABLE(htim);
 8001282:	6a1a      	ldr	r2, [r3, #32]
 8001284:	420a      	tst	r2, r1
 8001286:	d107      	bne.n	8001298 <HAL_TIM_PWM_Stop+0x38>
 8001288:	6a18      	ldr	r0, [r3, #32]
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_TIM_PWM_Stop+0x68>)
 800128c:	4210      	tst	r0, r2
 800128e:	d103      	bne.n	8001298 <HAL_TIM_PWM_Stop+0x38>
 8001290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001292:	480e      	ldr	r0, [pc, #56]	; (80012cc <HAL_TIM_PWM_Stop+0x6c>)
 8001294:	4002      	ands	r2, r0
 8001296:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_DISABLE(htim);
 8001298:	6a1a      	ldr	r2, [r3, #32]
 800129a:	420a      	tst	r2, r1
 800129c:	d107      	bne.n	80012ae <HAL_TIM_PWM_Stop+0x4e>
 800129e:	6a19      	ldr	r1, [r3, #32]
 80012a0:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <HAL_TIM_PWM_Stop+0x68>)
 80012a2:	4211      	tst	r1, r2
 80012a4:	d103      	bne.n	80012ae <HAL_TIM_PWM_Stop+0x4e>
 80012a6:	2101      	movs	r1, #1
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	438a      	bics	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80012ae:	2301      	movs	r3, #1
 80012b0:	343d      	adds	r4, #61	; 0x3d
}
 80012b2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012b4:	7023      	strb	r3, [r4, #0]
}
 80012b6:	bd10      	pop	{r4, pc}
 80012b8:	40012c00 	.word	0x40012c00
 80012bc:	00001111 	.word	0x00001111
 80012c0:	40014400 	.word	0x40014400
 80012c4:	40014800 	.word	0x40014800
 80012c8:	00000444 	.word	0x00000444
 80012cc:	ffff7fff 	.word	0xffff7fff

080012d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         contains the selected trigger output (TRGO) and the Master/Slave 
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, TIM_MasterConfigTypeDef * sMasterConfig)
{
 80012d0:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80012d2:	0004      	movs	r4, r0
 80012d4:	343c      	adds	r4, #60	; 0x3c
 80012d6:	7822      	ldrb	r2, [r4, #0]
{
 80012d8:	0003      	movs	r3, r0
 80012da:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 80012dc:	2a01      	cmp	r2, #1
 80012de:	d017      	beq.n	8001310 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80012e0:	001d      	movs	r5, r3

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012e2:	681b      	ldr	r3, [r3, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80012e4:	353d      	adds	r5, #61	; 0x3d
 80012e6:	7028      	strb	r0, [r5, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	306e      	adds	r0, #110	; 0x6e
 80012ec:	4382      	bics	r2, r0
 80012ee:	605a      	str	r2, [r3, #4]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012f0:	685a      	ldr	r2, [r3, #4]
 80012f2:	6808      	ldr	r0, [r1, #0]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80012f4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012f6:	4302      	orrs	r2, r0
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012f8:	2080      	movs	r0, #128	; 0x80
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80012fa:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	4382      	bics	r2, r0
 8001300:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001302:	689a      	ldr	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001304:	2000      	movs	r0, #0
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 8001306:	430a      	orrs	r2, r1
 8001308:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800130a:	2301      	movs	r3, #1
 800130c:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800130e:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8001310:	bd30      	pop	{r4, r5, pc}
	...

08001314 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */    
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8001314:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001316:	0004      	movs	r4, r0
 8001318:	343c      	adds	r4, #60	; 0x3c
 800131a:	7823      	ldrb	r3, [r4, #0]
{
 800131c:	0002      	movs	r2, r0
 800131e:	2002      	movs	r0, #2
  __HAL_LOCK(htim);
 8001320:	2b01      	cmp	r3, #1
 8001322:	d024      	beq.n	800136e <HAL_TIMEx_ConfigBreakDeadTime+0x5a>

  htim->State = HAL_TIM_STATE_BUSY;
 8001324:	0015      	movs	r5, r2
 8001326:	353d      	adds	r5, #61	; 0x3d
 8001328:	7028      	strb	r0, [r5, #0]
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  
  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800132a:	4b11      	ldr	r3, [pc, #68]	; (8001370 <HAL_TIMEx_ConfigBreakDeadTime+0x5c>)
 800132c:	68c8      	ldr	r0, [r1, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
  
  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800132e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001330:	4003      	ands	r3, r0
 8001332:	6888      	ldr	r0, [r1, #8]
 8001334:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001336:	480f      	ldr	r0, [pc, #60]	; (8001374 <HAL_TIMEx_ConfigBreakDeadTime+0x60>)
 8001338:	4003      	ands	r3, r0
 800133a:	6848      	ldr	r0, [r1, #4]
 800133c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800133e:	480e      	ldr	r0, [pc, #56]	; (8001378 <HAL_TIMEx_ConfigBreakDeadTime+0x64>)
 8001340:	4003      	ands	r3, r0
 8001342:	6808      	ldr	r0, [r1, #0]
 8001344:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <HAL_TIMEx_ConfigBreakDeadTime+0x68>)
 8001348:	4003      	ands	r3, r0
 800134a:	6908      	ldr	r0, [r1, #16]
 800134c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800134e:	480c      	ldr	r0, [pc, #48]	; (8001380 <HAL_TIMEx_ConfigBreakDeadTime+0x6c>)
 8001350:	4003      	ands	r3, r0
 8001352:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001354:	6989      	ldr	r1, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8001356:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <HAL_TIMEx_ConfigBreakDeadTime+0x70>)
 800135a:	4003      	ands	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 800135c:	480a      	ldr	r0, [pc, #40]	; (8001388 <HAL_TIMEx_ConfigBreakDeadTime+0x74>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800135e:	430b      	orrs	r3, r1
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001360:	4003      	ands	r3, r0
 8001362:	430b      	orrs	r3, r1
  htim->Instance->BDTR = tmpbdtr;
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
  
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001366:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001368:	2301      	movs	r3, #1
 800136a:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 800136c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800136e:	bd30      	pop	{r4, r5, pc}
 8001370:	fffffcff 	.word	0xfffffcff
 8001374:	fffffbff 	.word	0xfffffbff
 8001378:	fffff7ff 	.word	0xfffff7ff
 800137c:	ffffefff 	.word	0xffffefff
 8001380:	ffffdfff 	.word	0xffffdfff
 8001384:	ffffbfff 	.word	0xffffbfff
 8001388:	ffff7fff 	.word	0xffff7fff

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800138e:	2410      	movs	r4, #16
{
 8001390:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	2230      	movs	r2, #48	; 0x30
 8001394:	2100      	movs	r1, #0
 8001396:	a808      	add	r0, sp, #32
 8001398:	f000 faf3 	bl	8001982 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800139c:	0022      	movs	r2, r4
 800139e:	2100      	movs	r1, #0
 80013a0:	4668      	mov	r0, sp
 80013a2:	f000 faee 	bl	8001982 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013a6:	0022      	movs	r2, r4
 80013a8:	2100      	movs	r1, #0
 80013aa:	a804      	add	r0, sp, #16
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ac:	2480      	movs	r4, #128	; 0x80
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ae:	f000 fae8 	bl	8001982 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013b2:	2502      	movs	r5, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013b6:	0264      	lsls	r4, r4, #9
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b8:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013ba:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013bc:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c0:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f7ff f877 	bl	80004b4 <HAL_RCC_OscConfig>
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c6:	2100      	movs	r1, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	2307      	movs	r3, #7
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013ca:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013cc:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	9102      	str	r1, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d0:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	9501      	str	r5, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013d4:	f7ff fa82 	bl	80008dc <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80013d8:	23c0      	movs	r3, #192	; 0xc0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013da:	a804      	add	r0, sp, #16
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80013dc:	009b      	lsls	r3, r3, #2
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80013de:	9404      	str	r4, [sp, #16]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV32;
 80013e0:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	f7ff fb17 	bl	8000a14 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80013e6:	b015      	add	sp, #84	; 0x54
 80013e8:	bd30      	pop	{r4, r5, pc}
	...

080013ec <main>:
{
 80013ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ee:	b0a5      	sub	sp, #148	; 0x94
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f0:	ae1d      	add	r6, sp, #116	; 0x74
  HAL_Init();
 80013f2:	f7fe ff31 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 80013f6:	f7ff ffc9 	bl	800138c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fa:	0030      	movs	r0, r6
 80013fc:	2214      	movs	r2, #20
 80013fe:	2100      	movs	r1, #0
 8001400:	f000 fabf 	bl	8001982 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001404:	2080      	movs	r0, #128	; 0x80
 8001406:	4bb3      	ldr	r3, [pc, #716]	; (80016d4 <main+0x2e8>)
 8001408:	03c0      	lsls	r0, r0, #15
 800140a:	6959      	ldr	r1, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2500      	movs	r5, #0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	4301      	orrs	r1, r0
 8001410:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001414:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001418:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800141a:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141c:	9212      	str	r2, [sp, #72]	; 0x48
 800141e:	9a12      	ldr	r2, [sp, #72]	; 0x48
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001420:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001422:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]
 8001428:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800142a:	2200      	movs	r2, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	400b      	ands	r3, r1
 800142e:	9313      	str	r3, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001430:	2118      	movs	r1, #24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001434:	f7ff f838 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001438:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2401      	movs	r4, #1
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800143c:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	0031      	movs	r1, r6
 8001440:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	6074      	str	r4, [r6, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	60b5      	str	r5, [r6, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001446:	60f5      	str	r5, [r6, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001448:	931d      	str	r3, [sp, #116]	; 0x74
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f7fe ff7d 	bl	8000348 <HAL_GPIO_Init>
  RTC_TimeTypeDef sTime = {0};
 800144e:	0030      	movs	r0, r6
 8001450:	0029      	movs	r1, r5
 8001452:	2214      	movs	r2, #20
 8001454:	f000 fa95 	bl	8001982 <memset>
  hrtc.Instance = RTC;
 8001458:	4a9f      	ldr	r2, [pc, #636]	; (80016d8 <main+0x2ec>)
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <main+0x2f0>)
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800145c:	0010      	movs	r0, r2
  hrtc.Instance = RTC;
 800145e:	6013      	str	r3, [r2, #0]
  hrtc.Init.AsynchPrediv = 127;
 8001460:	237f      	movs	r3, #127	; 0x7f
 8001462:	6093      	str	r3, [r2, #8]
  hrtc.Init.SynchPrediv = 1999;
 8001464:	4b9e      	ldr	r3, [pc, #632]	; (80016e0 <main+0x2f4>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001466:	6055      	str	r5, [r2, #4]
  hrtc.Init.SynchPrediv = 1999;
 8001468:	60d3      	str	r3, [r2, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800146a:	6115      	str	r5, [r2, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800146c:	6155      	str	r5, [r2, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800146e:	6195      	str	r5, [r2, #24]
  RTC_DateTypeDef sDate = {0};
 8001470:	9516      	str	r5, [sp, #88]	; 0x58
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001472:	f7ff fb89 	bl	8000b88 <HAL_RTC_Init>
  sTime.Hours = 12;
 8001476:	230c      	movs	r3, #12
  RTC_DateTypeDef sDate = {0};
 8001478:	af16      	add	r7, sp, #88	; 0x58
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800147a:	0031      	movs	r1, r6
 800147c:	002a      	movs	r2, r5
 800147e:	4896      	ldr	r0, [pc, #600]	; (80016d8 <main+0x2ec>)
  sTime.Hours = 12;
 8001480:	7033      	strb	r3, [r6, #0]
  sTime.Minutes = 12;
 8001482:	7073      	strb	r3, [r6, #1]
  sTime.Seconds = 12;
 8001484:	70b3      	strb	r3, [r6, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001486:	60f5      	str	r5, [r6, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001488:	6135      	str	r5, [r6, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800148a:	f7ff fbdd 	bl	8000c48 <HAL_RTC_SetTime>
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800148e:	0039      	movs	r1, r7
 8001490:	002a      	movs	r2, r5
 8001492:	4891      	ldr	r0, [pc, #580]	; (80016d8 <main+0x2ec>)
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001494:	703c      	strb	r4, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001496:	707c      	strb	r4, [r7, #1]
  sDate.Date = 1;
 8001498:	70bc      	strb	r4, [r7, #2]
  sDate.Year = 0;
 800149a:	70fd      	strb	r5, [r7, #3]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800149c:	f7ff fc48 	bl	8000d30 <HAL_RTC_SetDate>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	2208      	movs	r2, #8
 80014a2:	0029      	movs	r1, r5
 80014a4:	a814      	add	r0, sp, #80	; 0x50
 80014a6:	f000 fa6c 	bl	8001982 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014aa:	221c      	movs	r2, #28
 80014ac:	0029      	movs	r1, r5
 80014ae:	0038      	movs	r0, r7
 80014b0:	f000 fa67 	bl	8001982 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014b4:	0030      	movs	r0, r6
 80014b6:	221c      	movs	r2, #28
 80014b8:	0029      	movs	r1, r5
 80014ba:	f000 fa62 	bl	8001982 <memset>
  htim1.Instance = TIM1;
 80014be:	4c89      	ldr	r4, [pc, #548]	; (80016e4 <main+0x2f8>)
 80014c0:	4b89      	ldr	r3, [pc, #548]	; (80016e8 <main+0x2fc>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014c2:	0020      	movs	r0, r4
  htim1.Instance = TIM1;
 80014c4:	6023      	str	r3, [r4, #0]
  htim1.Init.Prescaler = 0;
 80014c6:	6065      	str	r5, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	60a5      	str	r5, [r4, #8]
  htim1.Init.Period = 0;
 80014ca:	60e5      	str	r5, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014cc:	6125      	str	r5, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80014ce:	6165      	str	r5, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014d2:	f7ff fdd5 	bl	8001080 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014d6:	a914      	add	r1, sp, #80	; 0x50
 80014d8:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014da:	9514      	str	r5, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014dc:	9515      	str	r5, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014de:	f7ff fef7 	bl	80012d0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e4:	2204      	movs	r2, #4
 80014e6:	0039      	movs	r1, r7
 80014e8:	0020      	movs	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ea:	9316      	str	r3, [sp, #88]	; 0x58
  sConfigOC.Pulse = 0;
 80014ec:	607d      	str	r5, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ee:	60bd      	str	r5, [r7, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014f0:	60fd      	str	r5, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	613d      	str	r5, [r7, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f4:	617d      	str	r5, [r7, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f6:	61bd      	str	r5, [r7, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014f8:	f7ff fe1a 	bl	8001130 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014fc:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014fe:	0031      	movs	r1, r6
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001500:	019b      	lsls	r3, r3, #6
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001502:	0020      	movs	r0, r4
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001504:	6173      	str	r3, [r6, #20]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001506:	6075      	str	r5, [r6, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001508:	60b5      	str	r5, [r6, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800150a:	60f5      	str	r5, [r6, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800150c:	6135      	str	r5, [r6, #16]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800150e:	61b5      	str	r5, [r6, #24]
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001510:	951d      	str	r5, [sp, #116]	; 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001512:	f7ff feff 	bl	8001314 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001516:	0020      	movs	r0, r4
 8001518:	f000 f97c 	bl	8001814 <HAL_TIM_MspPostInit>
  Set_Current_Time(hrtc); // syncs up RTC with the system clock at compile time.
 800151c:	466a      	mov	r2, sp
 800151e:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <main+0x2ec>)
  setPWM(htim1,TIM_CHANNEL_2, 255, 200);
 8001520:	27ff      	movs	r7, #255	; 0xff
  Set_Current_Time(hrtc); // syncs up RTC with the system clock at compile time.
 8001522:	3310      	adds	r3, #16
 8001524:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001526:	c243      	stmia	r2!, {r0, r1, r6}
 8001528:	9210      	str	r2, [sp, #64]	; 0x40
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	9311      	str	r3, [sp, #68]	; 0x44
 800152e:	0013      	movs	r3, r2
 8001530:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <main+0x2ec>)
 8001536:	6818      	ldr	r0, [r3, #0]
 8001538:	6859      	ldr	r1, [r3, #4]
 800153a:	689a      	ldr	r2, [r3, #8]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	f000 f903 	bl	8001748 <Set_Current_Time>
  setPWM(htim1,TIM_CHANNEL_2, 255, 200);
 8001542:	23c8      	movs	r3, #200	; 0xc8
 8001544:	930e      	str	r3, [sp, #56]	; 0x38
 8001546:	3bc4      	subs	r3, #196	; 0xc4
 8001548:	930c      	str	r3, [sp, #48]	; 0x30
 800154a:	0023      	movs	r3, r4
 800154c:	466a      	mov	r2, sp
 800154e:	970d      	str	r7, [sp, #52]	; 0x34
 8001550:	3310      	adds	r3, #16
 8001552:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001554:	c243      	stmia	r2!, {r0, r1, r6}
 8001556:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001558:	cb43      	ldmia	r3!, {r0, r1, r6}
 800155a:	c243      	stmia	r2!, {r0, r1, r6}
 800155c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800155e:	c243      	stmia	r2!, {r0, r1, r6}
 8001560:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001562:	c243      	stmia	r2!, {r0, r1, r6}
 8001564:	6861      	ldr	r1, [r4, #4]
 8001566:	68a2      	ldr	r2, [r4, #8]
 8001568:	68e3      	ldr	r3, [r4, #12]
 800156a:	6820      	ldr	r0, [r4, #0]
 800156c:	f000 f8c4 	bl	80016f8 <setPWM>
  HAL_Delay(1000);
 8001570:	20fa      	movs	r0, #250	; 0xfa
 8001572:	0080      	lsls	r0, r0, #2
 8001574:	f7fe fe8e 	bl	8000294 <HAL_Delay>
  setPWM(htim1,TIM_CHANNEL_2, 255, 0);
 8001578:	2304      	movs	r3, #4
 800157a:	930c      	str	r3, [sp, #48]	; 0x30
 800157c:	0023      	movs	r3, r4
 800157e:	466a      	mov	r2, sp
 8001580:	950e      	str	r5, [sp, #56]	; 0x38
 8001582:	970d      	str	r7, [sp, #52]	; 0x34
 8001584:	3310      	adds	r3, #16
 8001586:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001588:	c243      	stmia	r2!, {r0, r1, r6}
 800158a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800158c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800158e:	c243      	stmia	r2!, {r0, r1, r6}
 8001590:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001592:	c243      	stmia	r2!, {r0, r1, r6}
 8001594:	cb43      	ldmia	r3!, {r0, r1, r6}
 8001596:	c243      	stmia	r2!, {r0, r1, r6}
 8001598:	68e3      	ldr	r3, [r4, #12]
 800159a:	6820      	ldr	r0, [r4, #0]
 800159c:	6861      	ldr	r1, [r4, #4]
 800159e:	68a2      	ldr	r2, [r4, #8]
 80015a0:	f000 f8aa 	bl	80016f8 <setPWM>
   HAL_Delay(1000);
 80015a4:	20fa      	movs	r0, #250	; 0xfa
 80015a6:	0080      	lsls	r0, r0, #2
 80015a8:	f7fe fe74 	bl	8000294 <HAL_Delay>
	  setPWM(htim1,TIM_CHANNEL_2, 255, i);
 80015ac:	2304      	movs	r3, #4
 80015ae:	9310      	str	r3, [sp, #64]	; 0x40
 80015b0:	b2ab      	uxth	r3, r5
 80015b2:	930e      	str	r3, [sp, #56]	; 0x38
 80015b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80015b6:	466a      	mov	r2, sp
 80015b8:	930c      	str	r3, [sp, #48]	; 0x30
 80015ba:	0023      	movs	r3, r4
 80015bc:	970d      	str	r7, [sp, #52]	; 0x34
 80015be:	3310      	adds	r3, #16
 80015c0:	cb43      	ldmia	r3!, {r0, r1, r6}
 80015c2:	c243      	stmia	r2!, {r0, r1, r6}
 80015c4:	cb43      	ldmia	r3!, {r0, r1, r6}
 80015c6:	c243      	stmia	r2!, {r0, r1, r6}
 80015c8:	cb43      	ldmia	r3!, {r0, r1, r6}
 80015ca:	c243      	stmia	r2!, {r0, r1, r6}
 80015cc:	cb43      	ldmia	r3!, {r0, r1, r6}
 80015ce:	c243      	stmia	r2!, {r0, r1, r6}
 80015d0:	68e3      	ldr	r3, [r4, #12]
 80015d2:	6820      	ldr	r0, [r4, #0]
 80015d4:	6861      	ldr	r1, [r4, #4]
 80015d6:	68a2      	ldr	r2, [r4, #8]
 80015d8:	f000 f88e 	bl	80016f8 <setPWM>
	  HAL_Delay(1000);
 80015dc:	20fa      	movs	r0, #250	; 0xfa
 80015de:	0080      	lsls	r0, r0, #2
 80015e0:	f7fe fe58 	bl	8000294 <HAL_Delay>
  for(int i=0; i<256; i++)
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	3501      	adds	r5, #1
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	429d      	cmp	r5, r3
 80015ec:	d1e0      	bne.n	80015b0 <main+0x1c4>
 80015ee:	2300      	movs	r3, #0
 80015f0:	25fa      	movs	r5, #250	; 0xfa
 80015f2:	9310      	str	r3, [sp, #64]	; 0x40
 80015f4:	006d      	lsls	r5, r5, #1
	  HAL_RTC_GetTime(&hrtc,&userTime,RTC_FORMAT_BIN); // order is specific
 80015f6:	2200      	movs	r2, #0
 80015f8:	493c      	ldr	r1, [pc, #240]	; (80016ec <main+0x300>)
 80015fa:	4837      	ldr	r0, [pc, #220]	; (80016d8 <main+0x2ec>)
 80015fc:	f7ff fc04 	bl	8000e08 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc,&userDate,RTC_FORMAT_BIN);
 8001600:	4e3b      	ldr	r6, [pc, #236]	; (80016f0 <main+0x304>)
 8001602:	2200      	movs	r2, #0
 8001604:	0031      	movs	r1, r6
 8001606:	4834      	ldr	r0, [pc, #208]	; (80016d8 <main+0x2ec>)
 8001608:	f7ff fc28 	bl	8000e5c <HAL_RTC_GetDate>
	  if(userDate.WeekDay==RTC_WEEKDAY_MONDAY){
 800160c:	7836      	ldrb	r6, [r6, #0]
 800160e:	2e01      	cmp	r6, #1
 8001610:	d1f1      	bne.n	80015f6 <main+0x20a>
		  if(userTime.Minutes%2==1){
 8001612:	4b36      	ldr	r3, [pc, #216]	; (80016ec <main+0x300>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	4233      	tst	r3, r6
 8001618:	d03c      	beq.n	8001694 <main+0x2a8>
			  setPWM(htim1,TIM_CHANNEL_2,500,100);
 800161a:	2364      	movs	r3, #100	; 0x64
 800161c:	950d      	str	r5, [sp, #52]	; 0x34
 800161e:	930e      	str	r3, [sp, #56]	; 0x38
 8001620:	3b60      	subs	r3, #96	; 0x60
			  setPWM(htim1,TIM_CHANNEL_2,500,1);
 8001622:	930c      	str	r3, [sp, #48]	; 0x30
 8001624:	0023      	movs	r3, r4
 8001626:	466a      	mov	r2, sp
 8001628:	3310      	adds	r3, #16
 800162a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800162c:	c283      	stmia	r2!, {r0, r1, r7}
 800162e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001630:	c283      	stmia	r2!, {r0, r1, r7}
 8001632:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001634:	c283      	stmia	r2!, {r0, r1, r7}
 8001636:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001638:	c283      	stmia	r2!, {r0, r1, r7}
 800163a:	68a2      	ldr	r2, [r4, #8]
 800163c:	68e3      	ldr	r3, [r4, #12]
 800163e:	6820      	ldr	r0, [r4, #0]
 8001640:	6861      	ldr	r1, [r4, #4]
 8001642:	f000 f859 	bl	80016f8 <setPWM>
			  HAL_Delay(1000);
 8001646:	20fa      	movs	r0, #250	; 0xfa
 8001648:	0080      	lsls	r0, r0, #2
 800164a:	f7fe fe23 	bl	8000294 <HAL_Delay>
		  if(userTime.Hours==12 && userTime.Minutes==31){
 800164e:	4a27      	ldr	r2, [pc, #156]	; (80016ec <main+0x300>)
 8001650:	4b28      	ldr	r3, [pc, #160]	; (80016f4 <main+0x308>)
 8001652:	8812      	ldrh	r2, [r2, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d121      	bne.n	800169c <main+0x2b0>
			  if (pwm_flag==0){
 8001658:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1cb      	bne.n	80015f6 <main+0x20a>
				  setPWM(htim1,TIM_CHANNEL_2,500,100);
 800165e:	3364      	adds	r3, #100	; 0x64
 8001660:	930e      	str	r3, [sp, #56]	; 0x38
 8001662:	3b60      	subs	r3, #96	; 0x60
 8001664:	930c      	str	r3, [sp, #48]	; 0x30
 8001666:	0023      	movs	r3, r4
 8001668:	466a      	mov	r2, sp
 800166a:	950d      	str	r5, [sp, #52]	; 0x34
 800166c:	3310      	adds	r3, #16
 800166e:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001670:	c283      	stmia	r2!, {r0, r1, r7}
 8001672:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001674:	c283      	stmia	r2!, {r0, r1, r7}
 8001676:	cb83      	ldmia	r3!, {r0, r1, r7}
 8001678:	c283      	stmia	r2!, {r0, r1, r7}
 800167a:	cb83      	ldmia	r3!, {r0, r1, r7}
 800167c:	c283      	stmia	r2!, {r0, r1, r7}
 800167e:	6820      	ldr	r0, [r4, #0]
 8001680:	6861      	ldr	r1, [r4, #4]
 8001682:	68a2      	ldr	r2, [r4, #8]
 8001684:	68e3      	ldr	r3, [r4, #12]
 8001686:	f000 f837 	bl	80016f8 <setPWM>
				  HAL_Delay(10); // not sure why the light is so dim...
 800168a:	200a      	movs	r0, #10
 800168c:	f7fe fe02 	bl	8000294 <HAL_Delay>
				  pwm_flag = 1;
 8001690:	9610      	str	r6, [sp, #64]	; 0x40
 8001692:	e7b0      	b.n	80015f6 <main+0x20a>
			  setPWM(htim1,TIM_CHANNEL_2,500,1);
 8001694:	960e      	str	r6, [sp, #56]	; 0x38
 8001696:	950d      	str	r5, [sp, #52]	; 0x34
 8001698:	2304      	movs	r3, #4
 800169a:	e7c2      	b.n	8001622 <main+0x236>
			  setPWM(htim1,TIM_CHANNEL_2,500,500);
 800169c:	2304      	movs	r3, #4
 800169e:	930c      	str	r3, [sp, #48]	; 0x30
 80016a0:	0023      	movs	r3, r4
 80016a2:	466a      	mov	r2, sp
 80016a4:	950e      	str	r5, [sp, #56]	; 0x38
 80016a6:	950d      	str	r5, [sp, #52]	; 0x34
 80016a8:	3310      	adds	r3, #16
 80016aa:	cb43      	ldmia	r3!, {r0, r1, r6}
 80016ac:	c243      	stmia	r2!, {r0, r1, r6}
 80016ae:	cb43      	ldmia	r3!, {r0, r1, r6}
 80016b0:	c243      	stmia	r2!, {r0, r1, r6}
 80016b2:	cb43      	ldmia	r3!, {r0, r1, r6}
 80016b4:	c243      	stmia	r2!, {r0, r1, r6}
 80016b6:	cb43      	ldmia	r3!, {r0, r1, r6}
 80016b8:	c243      	stmia	r2!, {r0, r1, r6}
 80016ba:	68e3      	ldr	r3, [r4, #12]
 80016bc:	6820      	ldr	r0, [r4, #0]
 80016be:	6861      	ldr	r1, [r4, #4]
 80016c0:	68a2      	ldr	r2, [r4, #8]
 80016c2:	f000 f819 	bl	80016f8 <setPWM>
			  HAL_Delay(10);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f7fe fde4 	bl	8000294 <HAL_Delay>
			  pwm_flag = 0;
 80016cc:	2300      	movs	r3, #0
 80016ce:	9310      	str	r3, [sp, #64]	; 0x40
 80016d0:	e791      	b.n	80015f6 <main+0x20a>
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	40021000 	.word	0x40021000
 80016d8:	2000003c 	.word	0x2000003c
 80016dc:	40002800 	.word	0x40002800
 80016e0:	000007cf 	.word	0x000007cf
 80016e4:	2000005c 	.word	0x2000005c
 80016e8:	40012c00 	.word	0x40012c00
 80016ec:	20000024 	.word	0x20000024
 80016f0:	20000020 	.word	0x20000020
 80016f4:	00001f0c 	.word	0x00001f0c

080016f8 <setPWM>:
#include "pwm.h"

void setPWM(TIM_HandleTypeDef timer, uint32_t channel, uint16_t period,
uint16_t pulse)
{
 80016f8:	b084      	sub	sp, #16
 80016fa:	b530      	push	{r4, r5, lr}
 80016fc:	b089      	sub	sp, #36	; 0x24
 80016fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001700:	2336      	movs	r3, #54	; 0x36
 8001702:	446b      	add	r3, sp
 8001704:	8fdd      	ldrh	r5, [r3, #62]	; 0x3e
 8001706:	900c      	str	r0, [sp, #48]	; 0x30
 8001708:	ab1e      	add	r3, sp, #120	; 0x78
 800170a:	910d      	str	r1, [sp, #52]	; 0x34
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 800170c:	a80c      	add	r0, sp, #48	; 0x30
 800170e:	991c      	ldr	r1, [sp, #112]	; 0x70
{
 8001710:	881c      	ldrh	r4, [r3, #0]
 8001712:	920e      	str	r2, [sp, #56]	; 0x38
 HAL_TIM_PWM_Stop(&timer, channel); // stop generation of pwm
 8001714:	f7ff fda4 	bl	8001260 <HAL_TIM_PWM_Stop>
 TIM_OC_InitTypeDef sConfigOC;
 timer.Init.Period = period; // set the period duration
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 8001718:	a80c      	add	r0, sp, #48	; 0x30
 timer.Init.Period = period; // set the period duration
 800171a:	950f      	str	r5, [sp, #60]	; 0x3c
 HAL_TIM_PWM_Init(&timer); // reinititialise with new period value
 800171c:	f7ff fcb0 	bl	8001080 <HAL_TIM_PWM_Init>
 sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001720:	2360      	movs	r3, #96	; 0x60
 8001722:	9301      	str	r3, [sp, #4]
 sConfigOC.Pulse = pulse; // set the pulse duration
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001724:	2300      	movs	r3, #0
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001726:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8001728:	a901      	add	r1, sp, #4
 800172a:	a80c      	add	r0, sp, #48	; 0x30
 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	9303      	str	r3, [sp, #12]
 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800172e:	9305      	str	r3, [sp, #20]
 sConfigOC.Pulse = pulse; // set the pulse duration
 8001730:	9402      	str	r4, [sp, #8]
 HAL_TIM_PWM_ConfigChannel(&timer, &sConfigOC, channel);
 8001732:	f7ff fcfd 	bl	8001130 <HAL_TIM_PWM_ConfigChannel>
 HAL_TIM_PWM_Start(&timer, channel); // start pwm generation
 8001736:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001738:	a80c      	add	r0, sp, #48	; 0x30
 800173a:	f7ff fd6f 	bl	800121c <HAL_TIM_PWM_Start>
}
 800173e:	b009      	add	sp, #36	; 0x24
 8001740:	bc30      	pop	{r4, r5}
 8001742:	bc08      	pop	{r3}
 8001744:	b004      	add	sp, #16
 8001746:	4718      	bx	r3

08001748 <Set_Current_Time>:
}



void Set_Current_Time()
{
 8001748:	b570      	push	{r4, r5, r6, lr}
 800174a:	b086      	sub	sp, #24


  RTC_TimeTypeDef sTime = {0};
 800174c:	ac01      	add	r4, sp, #4
 800174e:	2214      	movs	r2, #20
 8001750:	2100      	movs	r1, #0
 8001752:	0020      	movs	r0, r4
 8001754:	f000 f915 	bl	8001982 <memset>
*/


  /**Set the time to current time.
  */
  sTime.Hours = HOUR;
 8001758:	230d      	movs	r3, #13
  RTC_DateTypeDef DateToUpdate = {0};
 800175a:	2500      	movs	r5, #0
  sTime.Minutes = (BUILD_MIN_CH0-'0')*10+(BUILD_MIN_CH1-'0');
  sTime.Seconds = SECOND;

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800175c:	4e0d      	ldr	r6, [pc, #52]	; (8001794 <Set_Current_Time+0x4c>)
  sTime.Hours = HOUR;
 800175e:	7023      	strb	r3, [r4, #0]
  sTime.Minutes = (BUILD_MIN_CH0-'0')*10+(BUILD_MIN_CH1-'0');
 8001760:	3b02      	subs	r3, #2
 8001762:	7063      	strb	r3, [r4, #1]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001764:	002a      	movs	r2, r5
  sTime.Seconds = SECOND;
 8001766:	3321      	adds	r3, #33	; 0x21
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001768:	0021      	movs	r1, r4
 800176a:	0030      	movs	r0, r6
  sTime.Seconds = SECOND;
 800176c:	70a3      	strb	r3, [r4, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 800176e:	9500      	str	r5, [sp, #0]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001770:	f7ff fa6a 	bl	8000c48 <HAL_RTC_SetTime>
  uint8_t year = YEAR;


  //DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
  //DateToUpdate.Month = RTC_MONTH_JANUARY;
  DateToUpdate.WeekDay = dayofweek(DAY,MONTH,YEAR);
 8001774:	466a      	mov	r2, sp
 8001776:	2301      	movs	r3, #1
 8001778:	7013      	strb	r3, [r2, #0]
  DateToUpdate.Month = MONTH;
 800177a:	18db      	adds	r3, r3, r3
 800177c:	7053      	strb	r3, [r2, #1]
  DateToUpdate.Date = DAY;
 800177e:	3310      	adds	r3, #16
 8001780:	7093      	strb	r3, [r2, #2]
  DateToUpdate.Year = YEAR-2000; // it is 100 years, so we set it to reference year 2000
 8001782:	3301      	adds	r3, #1
 8001784:	70d3      	strb	r3, [r2, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001786:	4669      	mov	r1, sp
 8001788:	002a      	movs	r2, r5
 800178a:	0030      	movs	r0, r6
 800178c:	f7ff fad0 	bl	8000d30 <HAL_RTC_SetDate>
    //Error_Handler();
	//crap
  }


}
 8001790:	b006      	add	sp, #24
 8001792:	bd70      	pop	{r4, r5, r6, pc}
 8001794:	2000003c 	.word	0x2000003c

08001798 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	2001      	movs	r0, #1
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <HAL_MspInit+0x2c>)
{
 800179c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800179e:	6999      	ldr	r1, [r3, #24]
 80017a0:	4301      	orrs	r1, r0
 80017a2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017a6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4002      	ands	r2, r0
 80017ac:	9200      	str	r2, [sp, #0]
 80017ae:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b0:	69da      	ldr	r2, [r3, #28]
 80017b2:	430a      	orrs	r2, r1
 80017b4:	61da      	str	r2, [r3, #28]
 80017b6:	69db      	ldr	r3, [r3, #28]
 80017b8:	400b      	ands	r3, r1
 80017ba:	9301      	str	r3, [sp, #4]
 80017bc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017be:	b002      	add	sp, #8
 80017c0:	4770      	bx	lr
 80017c2:	46c0      	nop			; (mov r8, r8)
 80017c4:	40021000 	.word	0x40021000

080017c8 <HAL_RTC_MspInit>:
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{

  if(hrtc->Instance==RTC)
 80017c8:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RTC_MspInit+0x18>)
 80017ca:	6802      	ldr	r2, [r0, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d105      	bne.n	80017dc <HAL_RTC_MspInit+0x14>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017d0:	2380      	movs	r3, #128	; 0x80
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <HAL_RTC_MspInit+0x1c>)
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	6a11      	ldr	r1, [r2, #32]
 80017d8:	430b      	orrs	r3, r1
 80017da:	6213      	str	r3, [r2, #32]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80017dc:	4770      	bx	lr
 80017de:	46c0      	nop			; (mov r8, r8)
 80017e0:	40002800 	.word	0x40002800
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 80017e8:	4b08      	ldr	r3, [pc, #32]	; (800180c <HAL_TIM_PWM_MspInit+0x24>)
 80017ea:	6802      	ldr	r2, [r0, #0]
{
 80017ec:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d109      	bne.n	8001806 <HAL_TIM_PWM_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017f2:	2080      	movs	r0, #128	; 0x80
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_TIM_PWM_MspInit+0x28>)
 80017f6:	0100      	lsls	r0, r0, #4
 80017f8:	6991      	ldr	r1, [r2, #24]
 80017fa:	4301      	orrs	r1, r0
 80017fc:	6191      	str	r1, [r2, #24]
 80017fe:	6993      	ldr	r3, [r2, #24]
 8001800:	4003      	ands	r3, r0
 8001802:	9301      	str	r3, [sp, #4]
 8001804:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001806:	b002      	add	sp, #8
 8001808:	4770      	bx	lr
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	40012c00 	.word	0x40012c00
 8001810:	40021000 	.word	0x40021000

08001814 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001814:	b510      	push	{r4, lr}
 8001816:	0004      	movs	r4, r0
 8001818:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800181a:	2214      	movs	r2, #20
 800181c:	2100      	movs	r1, #0
 800181e:	a801      	add	r0, sp, #4
 8001820:	f000 f8af 	bl	8001982 <memset>
  if(htim->Instance==TIM1)
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_TIM_MspPostInit+0x48>)
 8001826:	6822      	ldr	r2, [r4, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d115      	bne.n	8001858 <HAL_TIM_MspPostInit+0x44>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800182c:	2080      	movs	r0, #128	; 0x80
 800182e:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <HAL_TIM_MspPostInit+0x4c>)
 8001830:	0280      	lsls	r0, r0, #10
 8001832:	6951      	ldr	r1, [r2, #20]
 8001834:	4301      	orrs	r1, r0
 8001836:	6151      	str	r1, [r2, #20]
 8001838:	6953      	ldr	r3, [r2, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183c:	4003      	ands	r3, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001842:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	2090      	movs	r0, #144	; 0x90
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	3bff      	subs	r3, #255	; 0xff
 800184c:	3bff      	subs	r3, #255	; 0xff
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800184e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001850:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001852:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f7fe fd78 	bl	8000348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001858:	b006      	add	sp, #24
 800185a:	bd10      	pop	{r4, pc}
 800185c:	40012c00 	.word	0x40012c00
 8001860:	40021000 	.word	0x40021000

08001864 <NMI_Handler>:
 8001864:	4770      	bx	lr

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	e7fe      	b.n	8001866 <HardFault_Handler>

08001868 <SVC_Handler>:
 8001868:	4770      	bx	lr

0800186a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800186a:	4770      	bx	lr

0800186c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800186c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186e:	f7fe fd03 	bl	8000278 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001872:	bd10      	pop	{r4, pc}

08001874 <SystemInit>:
  */
void SystemInit(void)
{
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8001874:	2101      	movs	r1, #1
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <SystemInit+0x48>)
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001878:	4811      	ldr	r0, [pc, #68]	; (80018c0 <SystemInit+0x4c>)
  RCC->CR |= (uint32_t)0x00000001U;
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4002      	ands	r2, r0
 8001884:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	480e      	ldr	r0, [pc, #56]	; (80018c4 <SystemInit+0x50>)
 800188a:	4002      	ands	r2, r0
 800188c:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	480d      	ldr	r0, [pc, #52]	; (80018c8 <SystemInit+0x54>)
 8001892:	4002      	ands	r2, r0
 8001894:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	480c      	ldr	r0, [pc, #48]	; (80018cc <SystemInit+0x58>)
 800189a:	4002      	ands	r2, r0

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 800189c:	200f      	movs	r0, #15
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 800189e:	605a      	str	r2, [r3, #4]
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80018a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018a2:	4382      	bics	r2, r0
 80018a4:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
#elif defined (STM32F030x6) || defined (STM32F030x8) || defined (STM32F031x6) || defined (STM32F038xx) || defined (STM32F030xC)
  /* Reset USART1SW[1:0], I2C1SW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEECU;
 80018a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a8:	4809      	ldr	r0, [pc, #36]	; (80018d0 <SystemInit+0x5c>)
 80018aa:	4002      	ands	r2, r0
 80018ac:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 80018ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018b0:	438a      	bics	r2, r1
 80018b2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]

}
 80018b8:	4770      	bx	lr
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	40021000 	.word	0x40021000
 80018c0:	08ffb80c 	.word	0x08ffb80c
 80018c4:	fef6ffff 	.word	0xfef6ffff
 80018c8:	fffbffff 	.word	0xfffbffff
 80018cc:	ffc0ffff 	.word	0xffc0ffff
 80018d0:	fffffeec 	.word	0xfffffeec

080018d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018fe:	f7ff ffb9 	bl	8001874 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001902:	f000 f811 	bl	8001928 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001906:	f7ff fd71 	bl	80013ec <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   r0, =_estack
 800190c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8001918:	080019e4 	.word	0x080019e4
  ldr r2, =_sbss
 800191c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001920:	2000009c 	.word	0x2000009c

08001924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>
	...

08001928 <__libc_init_array>:
 8001928:	b570      	push	{r4, r5, r6, lr}
 800192a:	2600      	movs	r6, #0
 800192c:	4d0c      	ldr	r5, [pc, #48]	; (8001960 <__libc_init_array+0x38>)
 800192e:	4c0d      	ldr	r4, [pc, #52]	; (8001964 <__libc_init_array+0x3c>)
 8001930:	1b64      	subs	r4, r4, r5
 8001932:	10a4      	asrs	r4, r4, #2
 8001934:	42a6      	cmp	r6, r4
 8001936:	d109      	bne.n	800194c <__libc_init_array+0x24>
 8001938:	2600      	movs	r6, #0
 800193a:	f000 f82b 	bl	8001994 <_init>
 800193e:	4d0a      	ldr	r5, [pc, #40]	; (8001968 <__libc_init_array+0x40>)
 8001940:	4c0a      	ldr	r4, [pc, #40]	; (800196c <__libc_init_array+0x44>)
 8001942:	1b64      	subs	r4, r4, r5
 8001944:	10a4      	asrs	r4, r4, #2
 8001946:	42a6      	cmp	r6, r4
 8001948:	d105      	bne.n	8001956 <__libc_init_array+0x2e>
 800194a:	bd70      	pop	{r4, r5, r6, pc}
 800194c:	00b3      	lsls	r3, r6, #2
 800194e:	58eb      	ldr	r3, [r5, r3]
 8001950:	4798      	blx	r3
 8001952:	3601      	adds	r6, #1
 8001954:	e7ee      	b.n	8001934 <__libc_init_array+0xc>
 8001956:	00b3      	lsls	r3, r6, #2
 8001958:	58eb      	ldr	r3, [r5, r3]
 800195a:	4798      	blx	r3
 800195c:	3601      	adds	r6, #1
 800195e:	e7f2      	b.n	8001946 <__libc_init_array+0x1e>
 8001960:	080019dc 	.word	0x080019dc
 8001964:	080019dc 	.word	0x080019dc
 8001968:	080019dc 	.word	0x080019dc
 800196c:	080019e0 	.word	0x080019e0

08001970 <memcpy>:
 8001970:	2300      	movs	r3, #0
 8001972:	b510      	push	{r4, lr}
 8001974:	429a      	cmp	r2, r3
 8001976:	d100      	bne.n	800197a <memcpy+0xa>
 8001978:	bd10      	pop	{r4, pc}
 800197a:	5ccc      	ldrb	r4, [r1, r3]
 800197c:	54c4      	strb	r4, [r0, r3]
 800197e:	3301      	adds	r3, #1
 8001980:	e7f8      	b.n	8001974 <memcpy+0x4>

08001982 <memset>:
 8001982:	0003      	movs	r3, r0
 8001984:	1882      	adds	r2, r0, r2
 8001986:	4293      	cmp	r3, r2
 8001988:	d100      	bne.n	800198c <memset+0xa>
 800198a:	4770      	bx	lr
 800198c:	7019      	strb	r1, [r3, #0]
 800198e:	3301      	adds	r3, #1
 8001990:	e7f9      	b.n	8001986 <memset+0x4>
	...

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	46c0      	nop			; (mov r8, r8)
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
